{
    "version": "https://jsonfeed.org/version/1",
    "title": null,
    "subtitle": "",
    "icon": "http://aura-hy.github.io/images/favicon.ico",
    "description": "",
    "home_page_url": "http://Aura-HY.github.io",
    "items": [
        {
            "id": "http://aura-hy.github.io/2025/03/02/knowledgeGraph/zeroToOne/zeroToOne/",
            "url": "http://aura-hy.github.io/2025/03/02/knowledgeGraph/zeroToOne/zeroToOne/",
            "title": "从零开始的知识图谱",
            "date_published": "2025-03-02T07:04:31.992Z",
            "content_html": "<h1 id=\"知识图谱\"><a class=\"anchor\" href=\"#知识图谱\">#</a> 知识图谱</h1>\n<h2 id=\"安装neo4j图数据库\"><a class=\"anchor\" href=\"#安装neo4j图数据库\">#</a> 安装 neo4j 图数据库</h2>\n<p>jdk 版本只支持 11，需要到系统环境变量中去改（现在已经改至 11）</p>\n<h3 id=\"启动neo4j\"><a class=\"anchor\" href=\"#启动neo4j\">#</a> 启动 neo4j</h3>\n<ol>\n<li>\n<p>在 neo4j 解压的文件夹的 bin 文件夹下，打开 cmd</p>\n</li>\n<li>\n<p>安装 / 卸载服务（cmd 命令）：</p>\n</li>\n<li>\n<pre><code class=\"language-cmd\"># 安装\nneo4j install-service\n# 卸载\nneo4j uninstall-service\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">4.  启动服务：neo4j.bat console。</span><br><span class=\"line\"></span><br><span class=\"line\">5. 浏览器打开：[http://localhost:7474/](https://link.zhihu.com/?target=http%3A//localhost%3A7474/)，默认账号和密码均为：neo4j。首次登录会提醒修改密码</span><br><span class=\"line\"></span><br><span class=\"line\">6. 常见命令：如开始服务、停止服务、重启服务、安装、卸载、更新等。</span><br><span class=\"line\">   Usage: neo4j &#123; console | start | stop | restart | status | install-service | uninstall-service | update-service &#125; &lt; -Verbose &gt;</span><br><span class=\"line\"></span><br><span class=\"line\">## 知识图谱基础知识</span><br><span class=\"line\"></span><br><span class=\"line\">1. 存储信息在节点和关系中的</span><br><span class=\"line\">2. 每个节点和关系都可以有属性、键值对</span><br><span class=\"line\">3. 节点可以被赋予标签以帮助将它们分组在一起</span><br><span class=\"line\">4. 关系始终有类型和方向</span><br><span class=\"line\"></span><br><span class=\"line\">![image-20241220202343473](https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20241220202343473.png)</span><br><span class=\"line\"></span><br><span class=\"line\">LangChain</span><br><span class=\"line\"></span><br><span class=\"line\">## 查询知识图谱</span><br><span class=\"line\"></span><br><span class=\"line\">### Querying the movie knowledge graph</span><br><span class=\"line\"></span><br><span class=\"line\">取一个Python中的多行字符串，赋值给cypher</span><br><span class=\"line\"></span><br><span class=\"line\">```python</span><br><span class=\"line\">cypher=&quot;&quot;&quot;&quot;</span><br><span class=\"line\">\tMATCH(n)  #匹配子句，模式匹配，可以寻找的最小模式匹配是一个单节点模式·将结果赋值给n</span><br><span class=\"line\">\tRETURN count(n) As numberOfNodes #返回这些节点的个数</span><br><span class=\"line\">&quot;&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n\n</code></pre>\n</li>\n</ol>\n<p><strong>要运行查询本身，就要利用之前设置好的 LangChain 集成</strong></p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result = kg.query(cypher)</span><br><span class=\"line\">result   ===&gt;[&#123;<span class=\"string\">&#x27;numberOfNodes&#x27;</span>:<span class=\"number\">171</span>&#125;]</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cypher=<span class=\"string\">&quot;&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">\tMATCH(m:movie)  //寻找一个标签是电影的</span></span><br><span class=\"line\"><span class=\"string\">\tRETURN count(m) As numberOfMovie </span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span><span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">kg.query(cypher)</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cypher=<span class=\"string\">&quot;&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">\tMATCH(tom:Person &#123;name:&quot;Tom Hanks&quot;&#125;)  //寻找一个标签是人的，名字属性是&quot;Tom Hanks&quot;的</span></span><br><span class=\"line\"><span class=\"string\">\tRETURN tom</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span><span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">kg,query(cypher)</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"为rag准备文本\"><a class=\"anchor\" href=\"#为rag准备文本\">#</a> 为 RAG 准备文本</h2>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> dotenv <span class=\"keyword\">import</span> load_dotenv</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> langchain_community.graphs <span class=\"keyword\">import</span> Neo4jGraph</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Load from enviroment</span></span><br><span class=\"line\">load_dotenv(<span class=\"string\">&#x27;../.env.studiomac&#x27;</span>,override=Ture)</span><br><span class=\"line\">NEO4J_URI = os.getenv(<span class=\"string\">&#x27;NEO4J_URI&#x27;</span>)</span><br><span class=\"line\">NEO4J_USERNAME = os.getenv(<span class=\"string\">&#x27;NEO4J_USERNAME&#x27;</span>)</span><br><span class=\"line\">NEO4J_PASSWORD = os.getenv(<span class=\"string\">&#x27;NEO4J_PASSWORD&#x27;</span>)</span><br><span class=\"line\">NEO4J_DATABASE = os.getenv(<span class=\"string\">&#x27;NEO4J_DATABASE&#x27;</span>) </span><br><span class=\"line\">OPENAI_API_KEY = os.getenv(<span class=\"string\">&#x27;OPENAI_API_KEY&#x27;</span>)</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建与知识图的连接，以便发送一些查询</span></span><br><span class=\"line\">kg = Neo4jGraph(</span><br><span class=\"line\">\turl=NEO4J_URI,username=USERNAME,password=PASSWORD,database=DATABASE</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>启用向量搜索的第一步是创建一个向量索引</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20241220211902481.png\" alt=\"image-20241220211902481\" /></p>\n<p>要关注的是 OPTIONS 部分中向量的索引有多大，维度有多大（这里是 OpenAI 嵌入模型的默认大小）</p>\n<p>还有相似函数</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">question = &quot;What movies are about adenture？&quot;</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kg.query(<span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">\tWITH ganai.vector.encode(</span></span><br><span class=\"line\"><span class=\"string\">\t\t$question,</span></span><br><span class=\"line\"><span class=\"string\">\t\t&quot;OpenAI&quot;,</span></span><br><span class=\"line\"><span class=\"string\">\t\t&#123;token:$openAiApiKey&#125;) AS question_embedding</span></span><br><span class=\"line\"><span class=\"string\">\tCALL db.index.vector.queryNodes(</span></span><br><span class=\"line\"><span class=\"string\">\t\t&#x27;movie_tagline_embeddings&#x27;,</span></span><br><span class=\"line\"><span class=\"string\">\t\t$top_k,</span></span><br><span class=\"line\"><span class=\"string\">\t\tquesion_embedding</span></span><br><span class=\"line\"><span class=\"string\">\t\t) YIELD node AS movie,score</span></span><br><span class=\"line\"><span class=\"string\">\tRETURN movie.title,movie.tagline,score</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span>,</span><br><span class=\"line\">params=&#123;<span class=\"string\">&quot;openAiApiKey&quot;</span>:OPENAI_API_KEY,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;question&quot;</span>:quesion,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;top_k&quot;</span>:<span class=\"number\">5</span></span><br><span class=\"line\">\t\t&#125;)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>WITH</code>  用于将前一句的结果传递给下一句，并且可以在这个过程中进行计算或过滤。</p>\n<p><code>ganai.vector.encode</code> : 这是一个自定义的函数调用，可能是通过扩展或插件添加到图数据库中的。它接受三个参数</p>\n<p><code>AS question_embedding</code> : 将  <code>ganai.vector.encode</code>  函数返回的结果（即问题的向量表示）赋值给一个新的变量  <code>question_embedding</code></p>\n<p><strong> <code>CALL</code> </strong>: 调用一个过程或函数</p>\n<p><strong> <code>'movie_tagline_embeddings'</code> </strong>: 指定要查询的向量索引名称，这里是指包含电影标语嵌入的索引。</p>\n<p><strong> <code>question_embedding</code> </strong>: 使用之前生成的问题嵌入作为查询条件。</p>\n<p><code>YIELD</code>  关键字用于从被调用的过程中提取结果。</p>\n<p><code>node</code>  是查询返回的节点，我们将其重命名为  <code>movie</code></p>\n<p><code>score</code>  是匹配度得分，表示查询向量与节点向量之间的相似度</p>\n</blockquote>\n<p>从头到尾一直在使用现有的数据库，但是，要构建自己的 RAG 应用程序，需要从头开始构建一个来表示和存储数据</p>\n<h2 id=\"从文本文档构建知识图谱\"><a class=\"anchor\" href=\"#从文本文档构建知识图谱\">#</a> 从文本文档构建知识图谱</h2>\n<h3 id=\"plan-of-attack\"><a class=\"anchor\" href=\"#plan-of-attack\">#</a> Plan of attack</h3>\n<ol>\n<li>对于每种形式都有不同的文本部分，我们要将他们拆分成块</li>\n<li>拆分成的块就是一个个节点，包含文本原始内容以及一些元数据作为属性</li>\n<li>然后就可以创建向量索引</li>\n<li>将计算文本嵌入以填充每个分块文本的索引</li>\n<li>做完这些就可以进行相似性搜索</li>\n</ol>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20241221150701214.png\" alt=\"image-20241221150701214\" /></p>\n<h3 id=\"start-work\"><a class=\"anchor\" href=\"#start-work\">#</a> start work</h3>\n<p>引入以及全局环境和变量设置</p>\n<p>这里只用了单个的 10k 文件，在实际实践中，需要对每个文件进行重复操作</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20241221150820335.png\" alt=\"image-20241221150820335\" /></p>\n<p>取第一个文本，并将其<strong>加载到 python 的一个变量</strong>中，检查这个变量在 python 中的类型是否为<strong>字典</strong>，然后<strong>遍历</strong>这个字典，<strong>看有什么可用的</strong>，然后取其中一个项目看其文本，只看其前 1500，接下来将它<strong>分割</strong>为快</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20241221151215575.png\" alt=\"image-20241221151215575\" /></p>\n<p>对文本进行分块，先是设置每一个分块的大小都是 2000，有 200 个字符重叠 ，然后执行这个分块将结果给 item1_text_chunks, 可以看到分到的块有 254 块</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20241221155004607.png\" alt=\"image-20241221155004607\" /></p>\n<p>接着需要写一个函数，用来遍历文本并进行分块，遍历分块</p>\n<p>在函数中，使用一个数组来存储分块后的数据，先遍历文件中的每一个项目，将每一个项目进行分块后再遍历每一个块，将块中的 信息，赋值，添加到一个数据记录中，附加有元数据的块集合</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20241221155418608.png\" alt=\"image-20241221155418608\" /></p>\n<p>然后既可以使用这个函数</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20241221155834149.png\" alt=\"image-20241221155834149\" /></p>\n<p>要将分块合并到知识图谱中，使用 cypher 语言</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20241221160118011.png\" alt=\"image-20241221160118011\" /></p>\n<p>在创建知识图谱之前要确保不会重复数据，就要添加约束索引，唯一 id</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20241221160355215.png\" alt=\"image-20241221160355215\" /></p>\n<p>遍历每一个块，对于每一个块执行之前的合并查询语句，并附上参数</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20241221160613541.png\" alt=\"image-20241221160613541\" /></p>\n<p><img data-src=\"%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1.assets/image-20241221160717831.png\" alt=\"image-20241221160717831\" /></p>\n<p>创建一个索引，文本嵌入块</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20241221160936918.png\" alt=\"image-20241221160936918\" /></p>\n<p><img data-src=\"%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1.assets/image-20241221161025038.png\" alt=\"image-20241221161025038\" /></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20241221161014247.png\" alt=\"image-20241221161014247\" /></p>\n<p>辅助函数用于相关搜索</p>\n<p>将问题作为参数传入这个函数中，将返回相似得分，节点文本</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20241221161353906.png\" alt=\"image-20241221161353906\" /></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20241221163113893.png\" alt=\"image-20241221163113893\" /></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20241221164101325.png\" alt=\"image-20241221164101325\" /></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20241221164113215.png\" alt=\"image-20241221164113215\" /></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20241221164338065.png\" alt=\"image-20241221164338065\" /></p>\n",
            "tags": [
                "知识图谱",
                "从零开始"
            ]
        },
        {
            "id": "http://aura-hy.github.io/2025/02/28/tool/git-know/useGit/GitUse/",
            "url": "http://aura-hy.github.io/2025/02/28/tool/git-know/useGit/GitUse/",
            "title": "Git的配置与VS图形化的简单使用",
            "date_published": "2025-02-28T05:53:12.499Z",
            "content_html": "<h1 id=\"git-使用图形化简单教程\"><a class=\"anchor\" href=\"#git-使用图形化简单教程\">#</a> Git 使用图形化简单教程</h1>\n<h2 id=\"git-配置\"><a class=\"anchor\" href=\"#git-配置\">#</a> Git 配置</h2>\n<p>配置文件路径一般在：用户 / 你的用户名</p>\n<p>找到 <code>.gitconfig</code>  文件</p>\n<p>先把以下代码复制粘贴进去，直接覆盖，原本的不要</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[user]</span><br><span class=\"line\">    name = your github name</span><br><span class=\"line\">    email = your primary email address</span><br><span class=\"line\">[credential &quot;https://gitee.com&quot;]</span><br><span class=\"line\">    provider = generic</span><br><span class=\"line\">[url &quot;https://github.com&quot;]</span><br><span class=\"line\">    instead0f = git://github.com</span><br><span class=\"line\">[filter &quot;lfs&quot;]</span><br><span class=\"line\">    clean = git-lfs clean -- %f</span><br><span class=\"line\">    smudge = git-lfs smudge -- %f</span><br><span class=\"line\">    process = git-lfs filter-process</span><br><span class=\"line\">    required = true</span><br><span class=\"line\">[core]</span><br><span class=\"line\">    ignorecase = false# 是否不区分文件名大小写。false - 区分大小写</span><br><span class=\"line\">    eol = lf</span><br><span class=\"line\">    autocrlf = input</span><br><span class=\"line\">    safecrlf = true</span><br><span class=\"line\">    longpaths = true</span><br><span class=\"line\">[http]</span><br><span class=\"line\">    proxy = socks5://127.0.0.1:10808 # 代理地址</span><br><span class=\"line\">    sslVerify = false</span><br><span class=\"line\">[https]</span><br><span class=\"line\">    proxy = socks5://127.0.0.1:10808</span><br><span class=\"line\">    sslVerify = false</span><br></pre></td></tr></table></figure></p>\n<p>要修改的地方：</p>\n<p>1、[user]</p>\n<p>​\tname = 你的 github 名称</p>\n<p>​\temail = 复制你 github 中以下图片位置中的字符串</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20250224232525054.png\" alt=\"image-20250224232525054\" /></p>\n<p>2、[http]、[https]</p>\n<p>如果是用 Steam++（Watt) 加速，就要把 proxy<strong> 都</strong>注释掉（或删掉）</p>\n<h2 id=\"将本地代码上传至github仓库\"><a class=\"anchor\" href=\"#将本地代码上传至github仓库\">#</a> 将本地代码上传至 github 仓库</h2>\n<h3 id=\"一-github-仓库创建\"><a class=\"anchor\" href=\"#一-github-仓库创建\">#</a> 一、GitHub 仓库创建</h3>\n<ol>\n<li><strong>新建仓库</strong><br />\n登录 GitHub，点击右上角 &quot;+&quot; 选择 &quot;New repository&quot;，填写仓库名称（建议英文命名），选择公开（Public）或私有（Private）权限。</li>\n</ol>\n<h3 id=\"二-本地代码仓库配置\"><a class=\"anchor\" href=\"#二-本地代码仓库配置\">#</a> 二、本地代码仓库配置</h3>\n<ol>\n<li>\n<p><strong>初始化 Git 仓库</strong><br />\n在本地项目根目录打开终端，执行命令初始化仓库：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure></p>\n<p>下面的 vscode 中的图形化操作可参考目录：相关操作 -&gt; 代码的提交 的以下部分，一样的，就是要绑定远程仓库</p>\n</li>\n<li>\n<p><strong>添加文件至暂存区</strong><br />\n使用以下命令添加全部文件（ <code>.</code>  表示当前目录所有文件）：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br></pre></td></tr></table></figure></p>\n<p>若需指定文件，替换 <code>.</code>  为文件名即可。</p>\n</li>\n<li>\n<p><strong>提交代码至本地仓库</strong><br />\n提交时需附加描述信息：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&quot;Initial commit: project setup&quot;</span></span><br></pre></td></tr></table></figure></p>\n</li>\n</ol>\n<h3 id=\"三-关联远程仓库并推送\"><a class=\"anchor\" href=\"#三-关联远程仓库并推送\">#</a> 三、关联远程仓库并推送</h3>\n<ol>\n<li>\n<p><strong>绑定远程仓库地址</strong><br />\n将 GitHub 仓库 URL 关联到本地（替换 URL 为实际地址）：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin https://github.com/username/repo.git</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p><strong>推送代码至 GitHub</strong><br />\n 执行强制推送（适用于全新仓库）：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -u origin main</span><br></pre></td></tr></table></figure></p>\n<p><strong>注意</strong>：GitHub 默认主分支为 <code>main</code> ，若本地分支名称为 <code>master</code> ，需通过 <code>git branch -M main</code>  重命名分支后再推送。</p>\n</li>\n</ol>\n<h2 id=\"将团队的小伙伴拉入仓库中\"><a class=\"anchor\" href=\"#将团队的小伙伴拉入仓库中\">#</a> 将团队的小伙伴拉入仓库中</h2>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20250224222718963.png\" alt=\"image-20250224222718963\" /></p>\n<h2 id=\"仓库的拉取clone\"><a class=\"anchor\" href=\"#仓库的拉取clone\">#</a> 仓库的拉取（clone）</h2>\n<p>1、在你要拉取的 github 仓库页面中复制 HTTPS</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20250224214659450.png\" alt=\"image-20250224214659450\" /></p>\n<p>2、在 vscode 中，点击克隆 git 仓库，把复制的粘贴上去，回车</p>\n<p>选择一个地方存储你拉取的仓库，可以在合适的地方新建一个文件夹，即可</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20250224214806781.png\" alt=\"image-20250224214806781\" /></p>\n<h2 id=\"相关操作\"><a class=\"anchor\" href=\"#相关操作\">#</a> 相关操作</h2>\n<h3 id=\"创建一个分支create-branch\"><a class=\"anchor\" href=\"#创建一个分支create-branch\">#</a> 创建一个分支（create branch）</h3>\n<p>拉下一个新的项目，第一件事就是创建一个新的分支，并切换到该分支</p>\n<p>1、找到 Branches</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20250224215711907.png\" alt=\"image-20250224215711907\" /></p>\n<p>2、输入新分支的名字，回车，并选择创建和转换到该分支</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20250224215823047.png\" alt=\"image-20250224215823047\" /></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20250224215939181.png\" alt=\"image-20250224215939181\" /></p>\n<h3 id=\"代码的提交commit\"><a class=\"anchor\" href=\"#代码的提交commit\">#</a> 代码的提交（commit）</h3>\n<p>自己提交代码前，应该是先 fetch+pull 这个 main 分支（主分支）到本地，然后在本地 merge main 分支到自己分支，最后再把代码更改 commit 到自己的分支</p>\n<p>这里的提交，是本地代码的提交，提交后，代码仍在本地</p>\n<p>每当完成一个功能时，差不多就要提交一次，提交一次不代表就要立马推送 / 请求合并，根据具体情况</p>\n<p>1、暂存</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20250224215135696.png\" alt=\"image-20250224215135696\" /></p>\n<p>2、在 “提交” 上面的框中写上本次提交的备注，正式的会有以下规范：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/20250212-110750.jpg\" alt=\"(gitImg/20250212-110750.jpg)\" /></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20250224215333507.png\" alt=\"image-20250224215333507\" /></p>\n<p>3、点击提交</p>\n<h3 id=\"代码的推送push\"><a class=\"anchor\" href=\"#代码的推送push\">#</a> 代码的推送（Push）</h3>\n<p>将本地提交的代码推送到云端（远程），这样全部成员都能看到你分支的代码</p>\n<p>注意在自己的分支</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20250224220347135.png\" alt=\"image-20250224220347135\" /></p>\n<h3 id=\"发送合并请求pr\"><a class=\"anchor\" href=\"#发送合并请求pr\">#</a> 发送合并请求（PR）</h3>\n<p>1、在自己的分支，点击 Create Pull Request</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20250224220511909.png\" alt=\"image-20250224220511909\" /></p>\n<p>2、跳转页面到浏览器，创建请求</p>\n<p>可以选择负责代码合并的人（reviewer）</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20250224223029908.png\" alt=\"image-20250224223029908\" /></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20250224220704276.png\" alt=\"image-20250224220704276\" /></p>\n<p>3、处理合并请求，被选择负责代码合并的人会在 github 的邮箱中看到请求信息</p>\n<p>如果代码比较简单，自己可以判断是否可以合并，就可以不选择，直接点合并</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20250224223127743.png\" alt=\"image-20250224223127743\" /></p>\n<h3 id=\"拉取更新的代码fetch-pull\"><a class=\"anchor\" href=\"#拉取更新的代码fetch-pull\">#</a> 拉取更新的代码（fetch、pull）</h3>\n<p>1、main 主干那里点 fetch</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20250224223421935.png\" alt=\"image-20250224223421935\" /></p>\n<p>2、</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20250224223504378.png\" alt=\"image-20250224223504378\" /></p>\n<h3 id=\"将主分支合并到自己分支\"><a class=\"anchor\" href=\"#将主分支合并到自己分支\">#</a> 将主分支合并到自己分支</h3>\n<p>拉取完主分支后，需要更新自己的分支</p>\n<p>就右键主分支，找到 merge 开头的，前提是确保当前是在自己分支</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20250224235429154.png\" alt=\"image-20250224235429154\" /></p>\n",
            "tags": [
                "工具使用",
                "git知识",
                "Git使用"
            ]
        },
        {
            "id": "http://aura-hy.github.io/2025/02/25/hello-world/",
            "url": "http://aura-hy.github.io/2025/02/25/hello-world/",
            "title": "Hello World",
            "date_published": "2025-02-25T15:25:03.891Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        },
        {
            "id": "http://aura-hy.github.io/2024/11/03/My-New-Post/",
            "url": "http://aura-hy.github.io/2024/11/03/My-New-Post/",
            "title": "My New Post",
            "date_published": "2024-11-03T13:33:58.000Z",
            "content_html": "",
            "tags": []
        }
    ]
}