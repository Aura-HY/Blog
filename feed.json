{
    "version": "https://jsonfeed.org/version/1",
    "title": null,
    "subtitle": "",
    "icon": "http://www.ssshyoo.top/images/favicon.ico",
    "description": "",
    "home_page_url": "http://www.ssshyoo.top",
    "items": [
        {
            "id": "http://www.ssshyoo.top/2025/03/02/Shoka%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%E8%A1%A5%E5%85%85/",
            "url": "http://www.ssshyoo.top/2025/03/02/Shoka%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2%E8%A1%A5%E5%85%85/",
            "title": "Shoka主题博客补充",
            "date_published": "2025-03-02T08:01:46.466Z",
            "content_html": "<p>这里小小汇总了一下搭建 Shoka 主题博客时可能会用到的参考资料，希望能帮到</p>\n<h1 id=\"shoka主题博客补充\"><a class=\"anchor\" href=\"#shoka主题博客补充\">#</a> Shoka 主题博客补充</h1>\n<h2 id=\"shokax-主题\"><a class=\"anchor\" href=\"#shokax-主题\">#</a> ShokaX 主题</h2>\n<p>我用排除法发现，如果文章全是精选文章，首页就会无法正常显示</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy8=\">Hexo 主题 Shoka &amp; multi-markdown-it 渲染器使用说明 - Theme Shoka Documentation - 二进制杂谈 - 计算机科学 | Yume Shoka = 有夢書架 = 吾乃天，壶中之天</span></p>\n<p>官方文档<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmthaXRha3UueHl6Lw==\"> Hexo-theme-ShokaX</span></p>\n<h2 id=\"图床配置\"><a class=\"anchor\" href=\"#图床配置\">#</a> 图床配置</h2>\n<p>参考博客 ——<span class=\"exturl\" data-url=\"aHR0cHM6Ly9meWZhbi5jbi8yMDI0LzAzLzA3L1Nob2thJUU0JUJEJUJGJUU3JTk0JUE4JUU4JTg3JUFBJUU1JUI3JUIxJUU3JTlBJTg0JUU1JTlCJUJFJUU1JUJBJThBLw==\">Shoka 使用自己的图床</span></p>\n<p>在 markdown 中使用 PicGo 没更新到最新版前踩了一个坑：</p>\n<p>当端口配置没问题时，却上传不了图片，返回 success：false，可能说明你的 github 的图库中已经存在这个图片了，所以上传失败。</p>\n<h2 id=\"首页精选分类\"><a class=\"anchor\" href=\"#首页精选分类\">#</a> 首页精选分类</h2>\n<p>搞了好久都没搞成，最后才发现是映射之间要有一个空格</p>\n<p>如：计算机科学 (英文冒号)(空格) 英文名        计算机科学: computer-science</p>\n<h2 id=\"站内搜索配置\"><a class=\"anchor\" href=\"#站内搜索配置\">#</a> 站内搜索配置</h2>\n<h3 id=\"配置流程\"><a class=\"anchor\" href=\"#配置流程\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmthaXRha3UueHl6L2d1aWRlL2NvbmZpZy5odG1sIyVFOSU4NSU4RCVFNyVCRCVBRSVFNiVCNSU4MSVFNyVBOCU4Qg==\">配置流程</span></h3>\n<ul>\n<li>登录 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYWxnb2xpYS5jb20v\">Algoliaopen in new window</span> 官网，建议使用 Github/Google 账号注册 / 登录。</li>\n<li>进入  <code>Dashboard</code>  -  <code>Search</code>  -  <code>Index</code>  页面，选择上方  <code>+ Create Index</code>  创建索引，索引名称建议为  <code>shokaX</code> 。</li>\n<li>进入  <code>Dashboard</code>  -  <code>Settings</code>  -  <code>API Keys</code>  页面，复制如下数据到上方配置中。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">页面数据</th>\n<th style=\"text-align:left\">对应配置</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>Application ID</code></td>\n<td style=\"text-align:left\"><code>appId</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Search-Only API Key</code></td>\n<td style=\"text-align:left\"><code>apiKey</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Admin API Key</code></td>\n<td style=\"text-align:left\"><code>adminApiKey</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">创建的索引名</td>\n<td style=\"text-align:left\"><code>indexName</code></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>在博客部署前运行  <code>hexo algolia</code>  上传索引，可在  <code>Dashboard</code>  -  <code>Search</code>  -  <code>Index</code>  页面中查看。</li>\n</ul>\n<p><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">algolia:</span></span><br><span class=\"line\">  <span class=\"attr\">appId:</span> <span class=\"comment\">#Your appId</span></span><br><span class=\"line\">  <span class=\"attr\">apiKey:</span> <span class=\"comment\">#Your apiKey</span></span><br><span class=\"line\">  <span class=\"attr\">adminApiKey:</span> <span class=\"comment\">#Your adminApiKey</span></span><br><span class=\"line\">  <span class=\"attr\">chunkSize:</span> <span class=\"number\">5000</span></span><br><span class=\"line\">  <span class=\"attr\">indexName:</span> <span class=\"comment\">#&quot;shokaX&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">fields:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">title</span> <span class=\"comment\">#必须配置</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">path</span> <span class=\"comment\">#必须配置</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">categories</span> <span class=\"comment\">#推荐配置</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">content:strip:truncate,0,2000</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">gallery</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">photos</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">tags</span></span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "http://www.ssshyoo.top/2025/02/28/tool/git-know/GitUse/",
            "url": "http://www.ssshyoo.top/2025/02/28/tool/git-know/GitUse/",
            "title": "Git的配置与VS图形化的简单使用",
            "date_published": "2025-02-28T05:53:12.499Z",
            "content_html": "<h1 id=\"git-使用图形化简单教程\"><a class=\"anchor\" href=\"#git-使用图形化简单教程\">#</a> Git 使用图形化简单教程</h1>\n<h2 id=\"git-配置\"><a class=\"anchor\" href=\"#git-配置\">#</a> Git 配置</h2>\n<p>配置文件路径一般在：用户 / 你的用户名</p>\n<p>找到 <code>.gitconfig</code>  文件</p>\n<p>先把以下代码复制粘贴进去，直接覆盖，原本的不要</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[user]</span><br><span class=\"line\">    name = your github name</span><br><span class=\"line\">    email = your primary email address</span><br><span class=\"line\">[credential &quot;https://gitee.com&quot;]</span><br><span class=\"line\">    provider = generic</span><br><span class=\"line\">[url &quot;https://github.com&quot;]</span><br><span class=\"line\">    instead0f = git://github.com</span><br><span class=\"line\">[filter &quot;lfs&quot;]</span><br><span class=\"line\">    clean = git-lfs clean -- %f</span><br><span class=\"line\">    smudge = git-lfs smudge -- %f</span><br><span class=\"line\">    process = git-lfs filter-process</span><br><span class=\"line\">    required = true</span><br><span class=\"line\">[core]</span><br><span class=\"line\">    ignorecase = false# 是否不区分文件名大小写。false - 区分大小写</span><br><span class=\"line\">    eol = lf</span><br><span class=\"line\">    autocrlf = input</span><br><span class=\"line\">    safecrlf = true</span><br><span class=\"line\">    longpaths = true</span><br><span class=\"line\">[http]</span><br><span class=\"line\">    proxy = socks5://127.0.0.1:10808 # 代理地址</span><br><span class=\"line\">    sslVerify = false</span><br><span class=\"line\">[https]</span><br><span class=\"line\">    proxy = socks5://127.0.0.1:10808</span><br><span class=\"line\">    sslVerify = false</span><br></pre></td></tr></table></figure></p>\n<p>要修改的地方：</p>\n<p>1、[user]</p>\n<p>​\tname = 你的 github 名称</p>\n<p>​\temail = 复制你 github 中以下图片位置中的字符串</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20250224232525054.png\" alt=\"image-20250224232525054\" /></p>\n<p>2、[http]、[https]</p>\n<p>如果是用 Steam++（Watt) 加速，就要把 proxy<strong> 都</strong>注释掉（或删掉）</p>\n<h2 id=\"将本地代码上传至github仓库\"><a class=\"anchor\" href=\"#将本地代码上传至github仓库\">#</a> 将本地代码上传至 github 仓库</h2>\n<h3 id=\"一-github-仓库创建\"><a class=\"anchor\" href=\"#一-github-仓库创建\">#</a> 一、GitHub 仓库创建</h3>\n<ol>\n<li><strong>新建仓库</strong><br />\n登录 GitHub，点击右上角 &quot;+&quot; 选择 &quot;New repository&quot;，填写仓库名称（建议英文命名），选择公开（Public）或私有（Private）权限。</li>\n</ol>\n<h3 id=\"二-本地代码仓库配置\"><a class=\"anchor\" href=\"#二-本地代码仓库配置\">#</a> 二、本地代码仓库配置</h3>\n<ol>\n<li>\n<p><strong>初始化 Git 仓库</strong><br />\n在本地项目根目录打开终端，执行命令初始化仓库：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure></p>\n<p>下面的 vscode 中的图形化操作可参考目录：相关操作 -&gt; 代码的提交 的以下部分，一样的，就是要绑定远程仓库</p>\n</li>\n<li>\n<p><strong>添加文件至暂存区</strong><br />\n使用以下命令添加全部文件（ <code>.</code>  表示当前目录所有文件）：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br></pre></td></tr></table></figure></p>\n<p>若需指定文件，替换 <code>.</code>  为文件名即可。</p>\n</li>\n<li>\n<p><strong>提交代码至本地仓库</strong><br />\n提交时需附加描述信息：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&quot;Initial commit: project setup&quot;</span></span><br></pre></td></tr></table></figure></p>\n</li>\n</ol>\n<h3 id=\"三-关联远程仓库并推送\"><a class=\"anchor\" href=\"#三-关联远程仓库并推送\">#</a> 三、关联远程仓库并推送</h3>\n<ol>\n<li>\n<p><strong>绑定远程仓库地址</strong><br />\n将 GitHub 仓库 URL 关联到本地（替换 URL 为实际地址）：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin https://github.com/username/repo.git</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p><strong>推送代码至 GitHub</strong><br />\n 执行强制推送（适用于全新仓库）：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -u origin main</span><br></pre></td></tr></table></figure></p>\n<p><strong>注意</strong>：GitHub 默认主分支为 <code>main</code> ，若本地分支名称为 <code>master</code> ，需通过 <code>git branch -M main</code>  重命名分支后再推送。</p>\n<p>首次推送可能需要生成 Github 个人访问令牌，参考操作如下：<br />\n<img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20250302160823076.png\" alt=\"image-20250302160823076\" /></p>\n</li>\n</ol>\n<h2 id=\"将团队的小伙伴拉入仓库中\"><a class=\"anchor\" href=\"#将团队的小伙伴拉入仓库中\">#</a> 将团队的小伙伴拉入仓库中</h2>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20250224222718963.png\" alt=\"image-20250224222718963\" /></p>\n<h2 id=\"通过https拉取仓库clone\"><a class=\"anchor\" href=\"#通过https拉取仓库clone\">#</a> 通过 https 拉取仓库（clone）</h2>\n<p>1、在你要拉取的 github 仓库页面中复制 HTTPS</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20250224214659450.png\" alt=\"image-20250224214659450\" /></p>\n<p>2、在 vscode 中，点击克隆 git 仓库，把复制的粘贴上去，回车</p>\n<p>选择一个地方存储你拉取的仓库，可以在合适的地方新建一个文件夹，即可</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20250224214806781.png\" alt=\"image-20250224214806781\" /></p>\n<blockquote>\n<p>点击之后会跳转到浏览器进行 github 账户登录验证，输入账号的密码就行，有的登录过 github 会自动进行账号身份识别，选择用户就可以了，选择完之后就可以看到我们创建的仓库了，点击需要添加的库，输入你的仓库名字，仓库就配置完成了</p>\n</blockquote>\n<h2 id=\"通过ssh拉取仓库clone\"><a class=\"anchor\" href=\"#通过ssh拉取仓库clone\">#</a> 通过 ssh 拉取仓库（clone）</h2>\n<p>如果通过 https 拉取仓库会卡在 github 账户登录验证那一块的话，就转用 ssh</p>\n<p>参考：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Jpbl9uaUIvYXJ0aWNsZS9kZXRhaWxzLzEzNTkxNTczOA==\">vscode 如何连接 github/gitee 远程仓库详细步骤（ssh+https）最全最详细_vscode github-CSDN 博客</span></p>\n<h2 id=\"相关操作\"><a class=\"anchor\" href=\"#相关操作\">#</a> 相关操作</h2>\n<p>如果在你的 VScode 中，并没有下面图片中的这些图形，可以在这里找到对应操作，不过要注意的是，你是<strong>在什么分支做的操作</strong></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20250310105819735.png\" alt=\"image-20250310105819735\" /></p>\n<p><strong>为什么要创建分支</strong><br />\n这就好比你考试的时候，有一张试卷和一张答题卡，你最终要交的是答题卡，并且你只有一张，为了卷面整洁好看，你只能拿一张草稿纸，把不确定的东西在草纸上写好，再移到答题卡上</p>\n<h3 id=\"创建一个分支create-branch\"><a class=\"anchor\" href=\"#创建一个分支create-branch\">#</a> 创建一个分支（create branch）</h3>\n<p>拉下一个新的项目，<strong>第一件事</strong>就是创建一个新的分支，并切换到该分支</p>\n<p>1、找到 Branches</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20250224215711907.png\" alt=\"image-20250224215711907\" /></p>\n<p>2、输入新分支的名字，回车，并选择创建和转换到该分支</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20250224215823047.png\" alt=\"image-20250224215823047\" /></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20250224215939181.png\" alt=\"image-20250224215939181\" /></p>\n<h3 id=\"代码的提交commit\"><a class=\"anchor\" href=\"#代码的提交commit\">#</a> 代码的提交（commit）</h3>\n<p>自己提交代码前，应该是先 fetch+pull 这个 main 分支（主分支）到本地，然后在本地 merge main 分支到自己分支，最后再把代码更改 commit 到自己的分支</p>\n<p>这里的提交，是本地代码的提交，提交后，<strong>代码仍在本地</strong></p>\n<p>每当完成一个功能时，差不多就要提交一次，提交一次不代表就要立马推送 / 请求合并，根据具体情况</p>\n<p>1、暂存</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20250224215135696.png\" alt=\"image-20250224215135696\" /></p>\n<p>2、在 “提交” 上面的框中写上本次提交的备注，正式的会有以下规范：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/20250212-110750.jpg\" alt=\"(gitImg/20250212-110750.jpg)\" /></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20250224215333507.png\" alt=\"image-20250224215333507\" /></p>\n<p>3、点击提交</p>\n<h3 id=\"代码的推送push\"><a class=\"anchor\" href=\"#代码的推送push\">#</a> 代码的推送（Push）</h3>\n<p>将本地提交的代码推送到云端（远程），这样全部成员都能看到你分支的代码</p>\n<p>注意在自己的分支</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20250224220347135.png\" alt=\"image-20250224220347135\" /></p>\n<h3 id=\"发送合并请求pr\"><a class=\"anchor\" href=\"#发送合并请求pr\">#</a> 发送合并请求（PR）</h3>\n<p>1、在自己的分支，点击 Create Pull Request</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20250224220511909.png\" alt=\"image-20250224220511909\" /></p>\n<p>2、跳转页面到浏览器，创建请求</p>\n<p>可以选择负责代码合并的人（reviewer）</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20250224223029908.png\" alt=\"image-20250224223029908\" /></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20250224220704276.png\" alt=\"image-20250224220704276\" /></p>\n<p>3、处理合并请求，被选择负责代码合并的人会在 github 的邮箱中看到请求信息</p>\n<p>如果代码比较简单，自己可以判断是否可以合并，就可以不选择，直接点合并</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20250224223127743.png\" alt=\"image-20250224223127743\" /></p>\n<h3 id=\"拉取更新的代码fetch-pull\"><a class=\"anchor\" href=\"#拉取更新的代码fetch-pull\">#</a> 拉取更新的代码（fetch、pull）</h3>\n<p>1、main 主干那里点 fetch</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20250224223421935.png\" alt=\"image-20250224223421935\" /></p>\n<p>2、</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20250224223504378.png\" alt=\"image-20250224223504378\" /></p>\n<h3 id=\"将主分支合并到自己分支\"><a class=\"anchor\" href=\"#将主分支合并到自己分支\">#</a> 将主分支合并到自己分支</h3>\n<p>拉取完主分支后，需要更新自己的分支</p>\n<p>就右键主分支，找到 merge 开头的，前提是确保当前是在自己分支</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20250224235429154.png\" alt=\"image-20250224235429154\" /></p>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>大体流程为：修改代码 -&gt; 暂存更改 -&gt; 填写提交信息 -&gt; 提交代码 -&gt; 推送 -&gt; 发送合并请求<br />\n至此只要等待你的代码通过审核就可以合并到主分支了<br />\n -&gt; 同意合并请求<br />\n至此你的代码就到了主分支</p>\n<p>当远程有更新了（主分支更新了）<br />\n---&gt; 拉取更新的代码<br />\n至此你就可以转到主分支看更新的代码<br />\n --&gt; 将主分支合并到自己分支<br />\n至此你就将更新的代码 “复制” 到了自己的分支，在自己分支也能看到更新的代码</p>\n",
            "tags": [
                "工具使用",
                "git知识"
            ]
        },
        {
            "id": "http://www.ssshyoo.top/2024/12/21/knowledgeGraph/zeroToOne/",
            "url": "http://www.ssshyoo.top/2024/12/21/knowledgeGraph/zeroToOne/",
            "title": "从零开始的知识图谱",
            "date_published": "2024-12-20T16:00:00.000Z",
            "content_html": "<h1 id=\"知识图谱\"><a class=\"anchor\" href=\"#知识图谱\">#</a> 知识图谱</h1>\n<h2 id=\"安装neo4j图数据库\"><a class=\"anchor\" href=\"#安装neo4j图数据库\">#</a> 安装 neo4j 图数据库</h2>\n<p>jdk 版本只支持 11，需要到系统环境变量中去改（现在已经改至 11）</p>\n<h3 id=\"启动neo4j\"><a class=\"anchor\" href=\"#启动neo4j\">#</a> 启动 neo4j</h3>\n<ol>\n<li>\n<p>在 neo4j 解压的文件夹的 bin 文件夹下，打开 cmd</p>\n</li>\n<li>\n<p>安装 / 卸载服务（cmd 命令）：</p>\n</li>\n<li>\n<pre><code class=\"language-cmd\"># 安装\nneo4j install-service\n# 卸载\nneo4j uninstall-service\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">4.  启动服务：neo4j.bat console。</span><br><span class=\"line\"></span><br><span class=\"line\">5. 浏览器打开：[http://localhost:7474/](https://link.zhihu.com/?target=http%3A//localhost%3A7474/)，默认账号和密码均为：neo4j。首次登录会提醒修改密码</span><br><span class=\"line\"></span><br><span class=\"line\">6. 常见命令：如开始服务、停止服务、重启服务、安装、卸载、更新等。</span><br><span class=\"line\">   Usage: neo4j &#123; console | start | stop | restart | status | install-service | uninstall-service | update-service &#125; &lt; -Verbose &gt;</span><br><span class=\"line\"></span><br><span class=\"line\">## 知识图谱基础知识</span><br><span class=\"line\"></span><br><span class=\"line\">1. 存储信息在节点和关系中的</span><br><span class=\"line\">2. 每个节点和关系都可以有属性、键值对</span><br><span class=\"line\">3. 节点可以被赋予标签以帮助将它们分组在一起</span><br><span class=\"line\">4. 关系始终有类型和方向</span><br><span class=\"line\"></span><br><span class=\"line\">![image-20241220202343473](https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20241220202343473.png)</span><br><span class=\"line\"></span><br><span class=\"line\">LangChain</span><br><span class=\"line\"></span><br><span class=\"line\">## 查询知识图谱</span><br><span class=\"line\"></span><br><span class=\"line\">### Querying the movie knowledge graph</span><br><span class=\"line\"></span><br><span class=\"line\">取一个Python中的多行字符串，赋值给cypher</span><br><span class=\"line\"></span><br><span class=\"line\">```python</span><br><span class=\"line\">cypher=&quot;&quot;&quot;&quot;</span><br><span class=\"line\">\tMATCH(n)  #匹配子句，模式匹配，可以寻找的最小模式匹配是一个单节点模式·将结果赋值给n</span><br><span class=\"line\">\tRETURN count(n) As numberOfNodes #返回这些节点的个数</span><br><span class=\"line\">&quot;&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n\n</code></pre>\n</li>\n</ol>\n<p><strong>要运行查询本身，就要利用之前设置好的 LangChain 集成</strong></p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result = kg.query(cypher)</span><br><span class=\"line\">result   ===&gt;[&#123;<span class=\"string\">&#x27;numberOfNodes&#x27;</span>:<span class=\"number\">171</span>&#125;]</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cypher=<span class=\"string\">&quot;&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">\tMATCH(m:movie)  //寻找一个标签是电影的</span></span><br><span class=\"line\"><span class=\"string\">\tRETURN count(m) As numberOfMovie </span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span><span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">kg.query(cypher)</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cypher=<span class=\"string\">&quot;&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">\tMATCH(tom:Person &#123;name:&quot;Tom Hanks&quot;&#125;)  //寻找一个标签是人的，名字属性是&quot;Tom Hanks&quot;的</span></span><br><span class=\"line\"><span class=\"string\">\tRETURN tom</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span><span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">kg,query(cypher)</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"为rag准备文本\"><a class=\"anchor\" href=\"#为rag准备文本\">#</a> 为 RAG 准备文本</h2>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> dotenv <span class=\"keyword\">import</span> load_dotenv</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> langchain_community.graphs <span class=\"keyword\">import</span> Neo4jGraph</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Load from enviroment</span></span><br><span class=\"line\">load_dotenv(<span class=\"string\">&#x27;../.env.studiomac&#x27;</span>,override=Ture)</span><br><span class=\"line\">NEO4J_URI = os.getenv(<span class=\"string\">&#x27;NEO4J_URI&#x27;</span>)</span><br><span class=\"line\">NEO4J_USERNAME = os.getenv(<span class=\"string\">&#x27;NEO4J_USERNAME&#x27;</span>)</span><br><span class=\"line\">NEO4J_PASSWORD = os.getenv(<span class=\"string\">&#x27;NEO4J_PASSWORD&#x27;</span>)</span><br><span class=\"line\">NEO4J_DATABASE = os.getenv(<span class=\"string\">&#x27;NEO4J_DATABASE&#x27;</span>) </span><br><span class=\"line\">OPENAI_API_KEY = os.getenv(<span class=\"string\">&#x27;OPENAI_API_KEY&#x27;</span>)</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建与知识图的连接，以便发送一些查询</span></span><br><span class=\"line\">kg = Neo4jGraph(</span><br><span class=\"line\">\turl=NEO4J_URI,username=USERNAME,password=PASSWORD,database=DATABASE</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>启用向量搜索的第一步是创建一个向量索引</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20241220211902481.png\" alt=\"image-20241220211902481\" /></p>\n<p>要关注的是 OPTIONS 部分中向量的索引有多大，维度有多大（这里是 OpenAI 嵌入模型的默认大小）</p>\n<p>还有相似函数</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">question = &quot;What movies are about adenture？&quot;</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kg.query(<span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">\tWITH ganai.vector.encode(</span></span><br><span class=\"line\"><span class=\"string\">\t\t$question,</span></span><br><span class=\"line\"><span class=\"string\">\t\t&quot;OpenAI&quot;,</span></span><br><span class=\"line\"><span class=\"string\">\t\t&#123;token:$openAiApiKey&#125;) AS question_embedding</span></span><br><span class=\"line\"><span class=\"string\">\tCALL db.index.vector.queryNodes(</span></span><br><span class=\"line\"><span class=\"string\">\t\t&#x27;movie_tagline_embeddings&#x27;,</span></span><br><span class=\"line\"><span class=\"string\">\t\t$top_k,</span></span><br><span class=\"line\"><span class=\"string\">\t\tquesion_embedding</span></span><br><span class=\"line\"><span class=\"string\">\t\t) YIELD node AS movie,score</span></span><br><span class=\"line\"><span class=\"string\">\tRETURN movie.title,movie.tagline,score</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span>,</span><br><span class=\"line\">params=&#123;<span class=\"string\">&quot;openAiApiKey&quot;</span>:OPENAI_API_KEY,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;question&quot;</span>:quesion,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;top_k&quot;</span>:<span class=\"number\">5</span></span><br><span class=\"line\">\t\t&#125;)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>WITH</code>  用于将前一句的结果传递给下一句，并且可以在这个过程中进行计算或过滤。</p>\n<p><code>ganai.vector.encode</code> : 这是一个自定义的函数调用，可能是通过扩展或插件添加到图数据库中的。它接受三个参数</p>\n<p><code>AS question_embedding</code> : 将  <code>ganai.vector.encode</code>  函数返回的结果（即问题的向量表示）赋值给一个新的变量  <code>question_embedding</code></p>\n<p><strong> <code>CALL</code> </strong>: 调用一个过程或函数</p>\n<p><strong> <code>'movie_tagline_embeddings'</code> </strong>: 指定要查询的向量索引名称，这里是指包含电影标语嵌入的索引。</p>\n<p><strong> <code>question_embedding</code> </strong>: 使用之前生成的问题嵌入作为查询条件。</p>\n<p><code>YIELD</code>  关键字用于从被调用的过程中提取结果。</p>\n<p><code>node</code>  是查询返回的节点，我们将其重命名为  <code>movie</code></p>\n<p><code>score</code>  是匹配度得分，表示查询向量与节点向量之间的相似度</p>\n</blockquote>\n<p>从头到尾一直在使用现有的数据库，但是，要构建自己的 RAG 应用程序，需要从头开始构建一个来表示和存储数据</p>\n<h2 id=\"从文本文档构建知识图谱\"><a class=\"anchor\" href=\"#从文本文档构建知识图谱\">#</a> 从文本文档构建知识图谱</h2>\n<h3 id=\"plan-of-attack\"><a class=\"anchor\" href=\"#plan-of-attack\">#</a> Plan of attack</h3>\n<ol>\n<li>对于每种形式都有不同的文本部分，我们要将他们拆分成块</li>\n<li>拆分成的块就是一个个节点，包含文本原始内容以及一些元数据作为属性</li>\n<li>然后就可以创建向量索引</li>\n<li>将计算文本嵌入以填充每个分块文本的索引</li>\n<li>做完这些就可以进行相似性搜索</li>\n</ol>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20241221150701214.png\" alt=\"image-20241221150701214\" /></p>\n<h3 id=\"start-work\"><a class=\"anchor\" href=\"#start-work\">#</a> start work</h3>\n<p>引入以及全局环境和变量设置</p>\n<p>这里只用了单个的 10k 文件，在实际实践中，需要对每个文件进行重复操作</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20241221150820335.png\" alt=\"image-20241221150820335\" /></p>\n<p>取第一个文本，并将其<strong>加载到 python 的一个变量</strong>中，检查这个变量在 python 中的类型是否为<strong>字典</strong>，然后<strong>遍历</strong>这个字典，<strong>看有什么可用的</strong>，然后取其中一个项目看其文本，只看其前 1500，接下来将它<strong>分割</strong>为快</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20241221151215575.png\" alt=\"image-20241221151215575\" /></p>\n<p>对文本进行分块，先是设置每一个分块的大小都是 2000，有 200 个字符重叠 ，然后执行这个分块将结果给 item1_text_chunks, 可以看到分到的块有 254 块</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20241221155004607.png\" alt=\"image-20241221155004607\" /></p>\n<p>接着需要写一个函数，用来遍历文本并进行分块，遍历分块</p>\n<p>在函数中，使用一个数组来存储分块后的数据，先遍历文件中的每一个项目，将每一个项目进行分块后再遍历每一个块，将块中的 信息，赋值，添加到一个数据记录中，附加有元数据的块集合</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20241221155418608.png\" alt=\"image-20241221155418608\" /></p>\n<p>然后既可以使用这个函数</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20241221155834149.png\" alt=\"image-20241221155834149\" /></p>\n<p>要将分块合并到知识图谱中，使用 cypher 语言</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20241221160118011.png\" alt=\"image-20241221160118011\" /></p>\n<p>在创建知识图谱之前要确保不会重复数据，就要添加约束索引，唯一 id</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20241221160355215.png\" alt=\"image-20241221160355215\" /></p>\n<p>遍历每一个块，对于每一个块执行之前的合并查询语句，并附上参数</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20241221160613541.png\" alt=\"image-20241221160613541\" /></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20241221160717831.png\" alt=\"image-20241221160717831\" /></p>\n<p>创建一个索引，文本嵌入块</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20241221160936918.png\" alt=\"image-20241221160936918\" /></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20241221161025038.png\" alt=\"image-20241221161025038\" /></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20241221161014247.png\" alt=\"image-20241221161014247\" /></p>\n<p>辅助函数用于相关搜索</p>\n<p>将问题作为参数传入这个函数中，将返回相似得分，节点文本</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20241221161353906.png\" alt=\"image-20241221161353906\" /></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20241221163113893.png\" alt=\"image-20241221163113893\" /></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20241221164101325.png\" alt=\"image-20241221164101325\" /></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20241221164113215.png\" alt=\"image-20241221164113215\" /></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20241221164338065.png\" alt=\"image-20241221164338065\" /></p>\n",
            "tags": [
                "知识图谱"
            ]
        },
        {
            "id": "http://www.ssshyoo.top/2024/08/07/openCV%E5%9B%BE%E7%89%87%E5%92%8C%E8%A7%86%E9%A2%91%E5%A4%84%E7%90%86/",
            "url": "http://www.ssshyoo.top/2024/08/07/openCV%E5%9B%BE%E7%89%87%E5%92%8C%E8%A7%86%E9%A2%91%E5%A4%84%E7%90%86/",
            "title": "openCV图片和视频处理",
            "date_published": "2024-08-06T16:00:00.000Z",
            "content_html": "<h1 id=\"opencvqt\"><a class=\"anchor\" href=\"#opencvqt\">#</a> OpenCV+QT</h1>\n<h2 id=\"文件项目配置\"><a class=\"anchor\" href=\"#文件项目配置\">#</a> 文件项目配置</h2>\n<p>属性（相对路径）</p>\n<p>配置调试选择 <code>x64</code></p>\n<p>常规 —— 输出目录 —— <code>..\\..\\bin</code></p>\n<p>调试 —— 工作目录 —— <code>..\\..\\bin</code></p>\n<p>C/C++—— 附加包含目录 —— <code>..\\include</code></p>\n<p>链接器 —— 常规 —— 附加库目录 —— <code>..\\..\\lib</code></p>\n<p>链接器 —— 输入 —— 附加依赖项 —— 在前面加 <code>opencv_world331d.dll</code></p>\n<h2 id=\"开发遇到的坑\"><a class=\"anchor\" href=\"#开发遇到的坑\">#</a> 开发遇到的坑</h2>\n<h3 id=\"ui-文件打不开\"><a class=\"anchor\" href=\"#ui-文件打不开\">#</a> ui 文件打不开</h3>\n<p>需要手动右键 <code>ui文件</code> 设置打开方式，选择 <code>qtdesigner.exe</code> ，并设置为默认打开方式</p>\n<h3 id=\"源文件打不开\"><a class=\"anchor\" href=\"#源文件打不开\">#</a> 源文件打不开</h3>\n<p>要考虑是否创建项目的时候漏了一些库没有选择，可以参照 pro 文件和 cmakelist 文件的配置看少配置了什么</p>\n<h2 id=\"mat\"><a class=\"anchor\" href=\"#mat\">#</a> mat</h2>\n<p><code>Mat</code>  是 OpenCV 中的基本图像容器。</p>\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//地址遍历不一定连续的Mat</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> row = <span class=\"number\">0</span>; row &lt; mat.rows; row++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> col = <span class=\"number\">0</span>; col &lt; mat.cols; col++) &#123;</span><br><span class=\"line\">\t\t\t(&amp;mat.data[row * mat.step])[col * es] = <span class=\"number\">80</span>;<span class=\"comment\">//B</span></span><br><span class=\"line\">\t\t\t(&amp;mat.data[row * mat.step])[col * es<span class=\"number\">+1</span>] = <span class=\"number\">120</span>;</span><br><span class=\"line\">\t\t\t(&amp;mat.data[row * mat.step])[col * es<span class=\"number\">+2</span>] = <span class=\"number\">200</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>mat.data</code>  是指向图像数据的指针，类型是  <code>uchar*</code> （无符号字符指针），表示图像的原始像素数据。</p>\n<p><code>mat.step</code>  是每行像素数据在内存中的字节数（步长），它可以比  <code>mat.cols * es</code>  大，特别是在行有对齐要求时。</p>\n<p><code>es</code>  是每个像素的字节数（对于  <code>CV_8UC3</code>  类型， <code>es</code>  是 3，因为每个像素有 3 个通道：B、G 和 R）。</p>\n<p><code>row * mat.step</code>  计算出当前行在图像数据中的起始位置。</p>\n<p><code>col * es</code>  计算出当前列在当前行中的偏移量。</p>\n<p><code>&amp;mat.data[row * mat.step]</code>  得到当前行的起始地址，再加上  <code>col * es</code>  得到当前像素的起始地址。</p>\n</blockquote>\n<h2 id=\"roi感兴趣区域裁剪图像\"><a class=\"anchor\" href=\"#roi感兴趣区域裁剪图像\">#</a> ROI 感兴趣区域裁剪图像</h2>\n<h3 id=\"cvrect-rect100100300300\"><a class=\"anchor\" href=\"#cvrect-rect100100300300\">#</a>  <code>cv::Rect rect(100,100,300,300)</code></h3>\n<p>100: 横向位置 100</p>\n<p>100：从上往下 100</p>\n<p>然后在这个点取一个矩形 300*300</p>\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tMat src = <span class=\"built_in\">imread</span>(<span class=\"string\">&quot;1.png&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 定义一个矩形区域</span></span><br><span class=\"line\">\t<span class=\"function\">Rect <span class=\"title\">rect</span><span class=\"params\">(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>)</span></span>;</span><br><span class=\"line\">\tMat roi = <span class=\"built_in\">src</span>(rect);<span class=\"comment\">// 提取该矩形区域作为ROI</span></span><br><span class=\"line\">\tMatSize s = roi.size;<span class=\"comment\">// 获取ROI的大小</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//创建一个自动调整大小的窗口，其大小与显示的图像相匹配。</span></span><br><span class=\"line\">\t<span class=\"built_in\">namedWindow</span>(<span class=\"string\">&quot;roi&quot;</span>,WINDOW_AUTOSIZE);</span><br><span class=\"line\">\t<span class=\"built_in\">imshow</span>(<span class=\"string\">&quot;roi&quot;</span>, roi);</span><br><span class=\"line\">\t<span class=\"built_in\">namedWindow</span>(<span class=\"string\">&quot;src&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">imshow</span>(<span class=\"string\">&quot;src&quot;</span>, src);</span><br><span class=\"line\">\t<span class=\"built_in\">waitKey</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"像素格式和灰度图\"><a class=\"anchor\" href=\"#像素格式和灰度图\">#</a> 像素格式和灰度图</h2>\n<h3 id=\"rgb\"><a class=\"anchor\" href=\"#rgb\">#</a> RGB</h3>\n<p>显卡输出的数据是 RGB 形式的，三个字节一个像素</p>\n<h3 id=\"yuv\"><a class=\"anchor\" href=\"#yuv\">#</a> YUV</h3>\n<p>亮度，色度，饱和度，电视，黑白电视，Y 信号就行</p>\n<p>存储空间会比 RGB 小，两个字节一个像素</p>\n<p>压缩算法基于 YUV，更利于做压缩算法，都是转化为 YUV 然后用压缩算法</p>\n<p>图像处理，最终显示的时候要把 YUV 转换为 RGB</p>\n<h3 id=\"rgay\"><a class=\"anchor\" href=\"#rgay\">#</a> RGAY</h3>\n<p>灰度图，一个字节 0~25</p>\n<p>一个字节一个像素  ，高速摄影</p>\n<h3 id=\"cvtcolorsrcimgcolor_bgr2gray\"><a class=\"anchor\" href=\"#cvtcolorsrcimgcolor_bgr2gray\">#</a>  <code>cvtColor(src,img,COLOR_BGR2GRAY)</code></h3>\n<p><code>#include&lt;opencv2/imgproc.hpp&gt;</code></p>\n<p>格式转换，BGR 转换为灰度图</p>\n<h3 id=\"手动实现转换灰度图\"><a class=\"anchor\" href=\"#手动实现转换灰度图\">#</a> 手动实现转换灰度图</h3>\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//手动实现转换灰度图</span></span><br><span class=\"line\"><span class=\"comment\">//des没有加引用会造成错误</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">RGBToGray</span><span class=\"params\">(Mat src, Mat &amp;des)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//GRay = (R*30+G*59+B*11+50)/100</span></span><br><span class=\"line\">\tdes.<span class=\"built_in\">create</span>(src.rows, src.cols, CV_8UC1);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> r = <span class=\"number\">0</span>; r &lt; src.rows; r++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> c = <span class=\"number\">0</span>; c &lt; src.rows; c++) &#123;</span><br><span class=\"line\">\t\t\tVec3b&amp; m = src.<span class=\"built_in\">at</span>&lt;Vec3b&gt;(r, c);</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> gray = (m[<span class=\"number\">2</span>] * <span class=\"number\">30</span> + m[<span class=\"number\">1</span>] * <span class=\"number\">59</span> + m[<span class=\"number\">0</span>] * <span class=\"number\">11</span> + <span class=\"number\">50</span>) / <span class=\"number\">100</span>;</span><br><span class=\"line\">\t\t\tdes.<span class=\"built_in\">at</span>&lt;uchar&gt;(r, c) = gray;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"二值化和阈值\"><a class=\"anchor\" href=\"#二值化和阈值\">#</a> 二值化和阈值</h2>\n<h3 id=\"二值化\"><a class=\"anchor\" href=\"#二值化\">#</a> 二值化</h3>\n<p>图片的一种存储方式</p>\n<p>一个黑一个白</p>\n<p>有大概五种算法</p>\n<h3 id=\"1-thresh_binary二进制阈值化\"><a class=\"anchor\" href=\"#1-thresh_binary二进制阈值化\">#</a> 1、 <code>THRESH_BINARY</code>  二进制阈值化</h3>\n<h3 id=\"2-thresh_binary_inv反二进制阈值化\"><a class=\"anchor\" href=\"#2-thresh_binary_inv反二进制阈值化\">#</a> 2、 <code>THRESH_BINARY_INV</code>  反二进制阈值化</h3>\n<p>根据参数，如果满足条件就变成白色，如果不满足就变成黑色，反向处理</p>\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//二进制阈值化</span></span><br><span class=\"line\"><span class=\"comment\">//（原图，目标图，阈值，最大值（这里255是白色的意思），方法）</span></span><br><span class=\"line\"><span class=\"built_in\">threshold</span>(gray, bin, <span class=\"number\">100</span>, <span class=\"number\">255</span>,THRESH_BINARY);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//反二进制阈值化</span></span><br><span class=\"line\"><span class=\"built_in\">threshold</span>(gray, ibin, <span class=\"number\">100</span>, <span class=\"number\">255</span>, THRESH_BINARY_INV);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"改变图片的对比度和亮度\"><a class=\"anchor\" href=\"#改变图片的对比度和亮度\">#</a> 改变图片的对比度和亮度</h2>\n<h3 id=\"gij-afij-b\"><a class=\"anchor\" href=\"#gij-afij-b\">#</a>  <code>g(i,j) = a*f(i,j) + b</code></h3>\n<p>目标像素 = a (对比度) * 原始颜色 + b (亮度)</p>\n<p>a 1.0~3.0 (对比)</p>\n<p>b 0~100 (亮度)</p>\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ChangeGain</span><span class=\"params\">(Mat&amp; src, Mat&amp; des, <span class=\"type\">float</span> a, <span class=\"type\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//`g(i,j) = a*f(i,j) + b`</span></span><br><span class=\"line\">\tdes.<span class=\"built_in\">create</span>(src.rows, src.cols, src.<span class=\"built_in\">type</span>());</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> r = <span class=\"number\">0</span>; r &lt; src.rows; r++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> c = <span class=\"number\">0</span>; c &lt; src.cols; c++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">\t\t\t\tdes.<span class=\"built_in\">at</span>&lt;Vec3b&gt;(r, c)[i] = <span class=\"built_in\">saturate_cast</span>&lt;uchar&gt;(a * src.<span class=\"built_in\">at</span>&lt;Vec3b&gt;(r, c)[i] + b);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"saturate_castuchar防止溢出\"><a class=\"anchor\" href=\"#saturate_castuchar防止溢出\">#</a>  <code>saturate_cast&lt;uchar&gt;</code>  防止溢出</h3>\n<p>可能会溢出，超过 255，就不是全白，反射，变成了全黑，不是我们想要的，所以要防止溢出，设置超过 255 它就是 255，全白，R 这个通道超过 255 就是全红，小于 0 就设为 0</p>\n<h3 id=\"opencv函数convertto\"><a class=\"anchor\" href=\"#opencv函数convertto\">#</a> opencv 函数 <code>convertTo()</code></h3>\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main()</span></span><br><span class=\"line\"><span class=\"comment\">//调整对比度和亮度</span></span><br><span class=\"line\">Mat src = <span class=\"built_in\">imread</span>(<span class=\"string\">&quot;1.png&quot;</span>);</span><br><span class=\"line\">Mat des;</span><br><span class=\"line\"><span class=\"built_in\">PrintMs</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">ChangeGain</span>(src, des, <span class=\"number\">2.0</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\"><span class=\"built_in\">PrintMs</span>(<span class=\"string\">&quot;ChangeGain&quot;</span>);</span><br><span class=\"line\">Mat des2;</span><br><span class=\"line\"><span class=\"comment\">//使用opencv的函数，测试体现convertTo更快</span></span><br><span class=\"line\"><span class=\"comment\">//-1表示与原图src一致</span></span><br><span class=\"line\">src.<span class=\"built_in\">convertTo</span>(des2, <span class=\"number\">-1</span>, <span class=\"number\">2.0</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\"><span class=\"built_in\">PrintMs</span>(<span class=\"string\">&quot;convertTo&quot;</span>);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"图像尺寸调整\"><a class=\"anchor\" href=\"#图像尺寸调整\">#</a> 图像尺寸调整</h2>\n<h3 id=\"inter_nearest邻近算法\"><a class=\"anchor\" href=\"#inter_nearest邻近算法\">#</a>  <code>INTER_NEAREST</code>  邻近算法</h3>\n<p>小变大 —— 拷贝周围的像素，会生成马赛克</p>\n<h4 id=\"自定义\"><a class=\"anchor\" href=\"#自定义\">#</a> 自定义</h4>\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> sx,sy = <span class=\"number\">0</span>;<span class=\"comment\">//原图对应的坐标</span></span><br><span class=\"line\"><span class=\"type\">float</span> fy = <span class=\"built_in\">float</span>(src.rows)/out.rows;</span><br><span class=\"line\"><span class=\"type\">float</span> fx = <span class=\"built_in\">float</span>(src.cols)/out.cols;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> y = <span class=\"number\">0</span>;y &lt; out.rows;y++ )&#123;</span><br><span class=\"line\">    sy = fy * y + <span class=\"number\">0.5</span>;<span class=\"comment\">//四舍五入</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> x = <span class=\"number\">0</span>;x &lt; out.cols;x++)&#123;</span><br><span class=\"line\">        sx = fx * x <span class=\"number\">+0.5</span>;</span><br><span class=\"line\">        out.<span class=\"built_in\">at</span>&lt;Vec3b&gt;(x,y) = src.<span class=\"built_in\">at</span>&lt;Vec3b&gt;(sy,sx);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//自定义缩放代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">xresize</span><span class=\"params\">(Mat&amp; src, Mat&amp; des, Size size)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//type()指的是这个类型是RGB还是灰度图</span></span><br><span class=\"line\">\tdes.<span class=\"built_in\">create</span>(size, src.<span class=\"built_in\">type</span>());</span><br><span class=\"line\">\t<span class=\"type\">int</span> sx, sy = <span class=\"number\">0</span>;<span class=\"comment\">//原图对应的坐标</span></span><br><span class=\"line\">\t<span class=\"type\">float</span> fy = <span class=\"built_in\">float</span>(src.rows) / des.rows;</span><br><span class=\"line\">\t<span class=\"type\">float</span> fx = <span class=\"built_in\">float</span>(src.cols) / des.cols;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> y = <span class=\"number\">0</span>; y &lt; des.rows; y++) &#123;</span><br><span class=\"line\">\t\tsy = fy * y + <span class=\"number\">0.5</span>;<span class=\"comment\">//四舍五入</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> x = <span class=\"number\">0</span>; x &lt; des.cols; x++) &#123;</span><br><span class=\"line\">\t\t\tsx = fx * x + <span class=\"number\">0.5</span>;</span><br><span class=\"line\">\t\t\tdes.<span class=\"built_in\">at</span>&lt;Vec3b&gt;(x, y) = src.<span class=\"built_in\">at</span>&lt;Vec3b&gt;(sy, sx);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main()</span></span><br><span class=\"line\">Mat src = <span class=\"built_in\">imread</span>(<span class=\"string\">&quot;1.png&quot;</span>); </span><br><span class=\"line\">Mat img128;</span><br><span class=\"line\"><span class=\"comment\">//原图，目标图，放缩尺寸</span></span><br><span class=\"line\"><span class=\"built_in\">xresize</span>(src, img128, <span class=\"built_in\">Size</span>(<span class=\"number\">128</span>, <span class=\"number\">128</span>));</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"opencv的-resize\"><a class=\"anchor\" href=\"#opencv的-resize\">#</a> OpenCV 的  <code>resize()</code></h4>\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//opencv自带的函数，有多线程处理、优化</span></span><br><span class=\"line\"><span class=\"built_in\">resize</span>(src, img256, <span class=\"built_in\">Size</span>(<span class=\"number\">256</span>, <span class=\"number\">256</span>),<span class=\"number\">0</span>,<span class=\"number\">0</span>，INTER_NEAREST);</span><br></pre></td></tr></table></figure></p>\n<p>第 4、5 个参数表示 fx,fy, 当 Size 为空时，它们作为一个比例来乘以原图的大小</p>\n<p>第 6 个参数，算法类型，默认是双线性插值，这里是邻近算法</p>\n<h3 id=\"cv_inter_linear-双线性插值缺省使用\"><a class=\"anchor\" href=\"#cv_inter_linear-双线性插值缺省使用\">#</a>  <code>CV_INTER_LINEAR</code>  双线性插值（缺省使用）</h3>\n<h4 id=\"滤波\"><a class=\"anchor\" href=\"#滤波\">#</a> 滤波</h4>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20240806120841036.png\" alt=\"image-20240806120841036\" /></p>\n<p>解决放大图像边界会出现马赛克、模糊的情况</p>\n<h4 id=\"双线性内插值\"><a class=\"anchor\" href=\"#双线性内插值\">#</a> 双线性内插值</h4>\n<p>使放大的图像边界更加平滑</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20240806121855326.png\" alt=\"image-20240806121855326\" /></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20240806122849235.png\" alt=\"image-20240806122849235\" /></p>\n<p>使用：直接把方法参数处改为 <code>INTER_LINEAR</code></p>\n<h2 id=\"图像金字塔\"><a class=\"anchor\" href=\"#图像金字塔\">#</a> 图像金字塔</h2>\n<p>在图像放大缩小、拼接、扭曲都可以用到这种算法</p>\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//高斯金字塔，原图，目标图</span></span><br><span class=\"line\"><span class=\"built_in\">pyrDown</span>(src, gsrc);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//拉普拉斯金字塔</span></span><br><span class=\"line\"><span class=\"built_in\">pyrUp</span>(src, lsrc);</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20240806123833136.png\" alt=\"image-20240806123833136\" /></p>\n<h3 id=\"高斯金字塔向下采样缩小\"><a class=\"anchor\" href=\"#高斯金字塔向下采样缩小\">#</a> 高斯金字塔（向下采样缩小）</h3>\n<p>用来向下采样</p>\n<p>把整个分辨率降低</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20240806123851349.png\" alt=\"image-20240806123851349\" /></p>\n<p>比如图像是 8*8 的，卷积后将所有偶数行和列去除，就缩小成了 4*4 的图像</p>\n<p>G (i+1) 表示上一层</p>\n<h4 id=\"高斯内核\"><a class=\"anchor\" href=\"#高斯内核\">#</a> 高斯内核</h4>\n<p>提供好的固定的矩阵</p>\n<p>opencv 提供的高斯金字塔只支持这种 5*5 的矩阵</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20240806205111854.png\" alt=\"image-20240806205111854\" /></p>\n<h3 id=\"拉普拉斯金字塔\"><a class=\"anchor\" href=\"#拉普拉斯金字塔\">#</a> 拉普拉斯金字塔</h3>\n<p>用来从金字塔低层图像重建上层未采样图像</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20240806205436330.png\" alt=\"image-20240806205436330\" /></p>\n<h2 id=\"两幅图像混合blending\"><a class=\"anchor\" href=\"#两幅图像混合blending\">#</a> 两幅图像混合（blending）</h2>\n<h3 id=\"公式\"><a class=\"anchor\" href=\"#公式\">#</a> 公式</h3>\n<p><strong> <code>dst = src1*a + src2*(1-a) + gamma </code> </strong></p>\n<p>最终叠化成果的像素集 = 原图 1 * 透明度 + 原图 2 * 透明度</p>\n<p><code>（1-透明度）</code> 是为了融合度高，一个高一个低</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20240806223204829.png\" alt=\"image-20240806223204829\" /></p>\n<h3 id=\"opencv-addweighted\"><a class=\"anchor\" href=\"#opencv-addweighted\">#</a> OpenCV- <code>addWeighted()</code></h3>\n<p>第五个参数（0.0）：对图像的增益，比如颜色更深，白色更亮</p>\n<p>第六个参数（dst)：最终生成的目标</p>\n<h2 id=\"图像旋转和镜像\"><a class=\"anchor\" href=\"#图像旋转和镜像\">#</a> 图像旋转和镜像</h2>\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//旋转rotate</span></span><br><span class=\"line\">Mat rot;</span><br><span class=\"line\">cv::<span class=\"built_in\">rotate</span>(src, rot, ROTATE_90_CLOCKWISE);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//镜像flip</span></span><br><span class=\"line\">Mat fl;</span><br><span class=\"line\">cv::<span class=\"built_in\">flip</span>(src, fl, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"旋转\"><a class=\"anchor\" href=\"#旋转\">#</a> 旋转</h3>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20240806224542424.png\" alt=\"image-20240806224542424\" /></p>\n<h3 id=\"镜像\"><a class=\"anchor\" href=\"#镜像\">#</a> 镜像</h3>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20240806224619312.png\" alt=\"image-20240806224619312\" /></p>\n<p>0 (x)—— 上下做镜像</p>\n<p>1 (y)—— 左右做镜像</p>\n<p>-1—— 两个都做</p>\n<h2 id=\"通过roi图像合并\"><a class=\"anchor\" href=\"#通过roi图像合并\">#</a> 通过 ROI 图像合并</h2>\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//roi图像合并</span></span><br><span class=\"line\"><span class=\"comment\">//使图像高度一致</span></span><br><span class=\"line\">    <span class=\"type\">int</span> height = src.rows;</span><br><span class=\"line\">    <span class=\"type\">int</span> width1 = src.cols;</span><br><span class=\"line\">    <span class=\"type\">int</span> width2 = src<span class=\"number\">2.</span>cols;</span><br><span class=\"line\"><span class=\"comment\">//将高图像等比缩放</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (src.rows &gt; src<span class=\"number\">2.</span>rows) &#123;</span><br><span class=\"line\">        height = src<span class=\"number\">2.</span>rows;</span><br><span class=\"line\">        width1 = src.cols * ((<span class=\"type\">float</span>)src<span class=\"number\">2.</span>rows / (<span class=\"type\">float</span>)src.rows);</span><br><span class=\"line\">        <span class=\"built_in\">resize</span>(src, src, <span class=\"built_in\">Size</span>(width1, height));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (src.rows &lt; src<span class=\"number\">2.</span>rows) &#123;</span><br><span class=\"line\">        width2 = src<span class=\"number\">2.</span>cols * ((<span class=\"type\">float</span>)src.rows / (<span class=\"type\">float</span>)src<span class=\"number\">2.</span>rows);</span><br><span class=\"line\">        <span class=\"built_in\">resize</span>(src2, src2, <span class=\"built_in\">Size</span>(width2, height));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//创建目标Mat</span></span><br><span class=\"line\">    Mat des;</span><br><span class=\"line\">    des.<span class=\"built_in\">create</span>(height, width1 + width2, src.<span class=\"built_in\">type</span>());</span><br><span class=\"line\">    Mat r1 = <span class=\"built_in\">des</span>(<span class=\"built_in\">Rect</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width1, height));</span><br><span class=\"line\">    Mat r2 = <span class=\"built_in\">des</span>(<span class=\"built_in\">Rect</span>(width1, <span class=\"number\">0</span>, width2, height));</span><br><span class=\"line\">    src.<span class=\"built_in\">copyTo</span>(r1);</span><br><span class=\"line\">    src<span class=\"number\">2.</span><span class=\"built_in\">copyTo</span>(r2);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"ffmpeg工具抽取剪切音频合并视频\"><a class=\"anchor\" href=\"#ffmpeg工具抽取剪切音频合并视频\">#</a> ffmpeg 工具抽取剪切音频合并视频</h2>\n<h3 id=\"抽取音频\"><a class=\"anchor\" href=\"#抽取音频\">#</a> 抽取音频</h3>\n<p><code>ffmpeg.exe -i 1.avi -vn 1.mp3</code></p>\n<p>-i 表示源 1.avi 输入文件 -vn 表示不转换视频 1.MP3 输出文件</p>\n<h3 id=\"剪切音频\"><a class=\"anchor\" href=\"#剪切音频\">#</a> 剪切音频</h3>\n<p><code>ffmpeg -ss 0:0:30 -t 0:0:20 -i input.mp3 -c copy output.mp3</code></p>\n<p>-ss 表示开始时间 -t 表示剪切时间</p>\n<h3 id=\"音视频合并\"><a class=\"anchor\" href=\"#音视频合并\">#</a> 音视频合并</h3>\n<p><code>ffmpeg.exe -i 1.mp3 -i 1.mp4 -c copy out.mp4</code></p>\n<h2 id=\"opencv-videocapture读取视频\"><a class=\"anchor\" href=\"#opencv-videocapture读取视频\">#</a> OpenCV VideoCapture 读取视频</h2>\n<h3 id=\"videocapture类\"><a class=\"anchor\" href=\"#videocapture类\">#</a> VideoCapture 类</h3>\n<p>这是一个读取视频的类，视频源可以是文件、摄像头、RTSP 流都可以</p>\n<h3 id=\"打开摄像头方式\"><a class=\"anchor\" href=\"#打开摄像头方式\">#</a> 打开摄像头方式</h3>\n<h4 id=\"bool-openint-index\"><a class=\"anchor\" href=\"#bool-openint-index\">#</a>  <code>bool open(int index)</code></h4>\n<p>这个参数 index 索引对应你的所有摄像机列表</p>\n<h5 id=\"openint-cameranumint-apipreference\"><a class=\"anchor\" href=\"#openint-cameranumint-apipreference\">#</a>  <code>open(int cameraNum.int apiPreference)</code></h5>\n<p>可以手动选择 api 接口，默认是 0 ，自动监测</p>\n<h4 id=\"videocapture-capindex\"><a class=\"anchor\" href=\"#videocapture-capindex\">#</a>  <code>VideoCapture cap(index)</code></h4>\n<p>这是一个构造函数</p>\n<h3 id=\"打开视频流文件\"><a class=\"anchor\" href=\"#打开视频流文件\">#</a> 打开视频流文件</h3>\n<h4 id=\"bool-openconst-string-filename\"><a class=\"anchor\" href=\"#bool-openconst-string-filename\">#</a>  <code>bool open(const String &amp;filename)</code></h4>\n<h4 id=\"videocapture-capconst-string-file\"><a class=\"anchor\" href=\"#videocapture-capconst-string-file\">#</a>  <code>VideoCapture cap(const String&amp; file)</code></h4>\n<h4 id=\"bool-openconst-string-filenameint-apipreference\"><a class=\"anchor\" href=\"#bool-openconst-string-filenameint-apipreference\">#</a>  <code>bool open(const String &amp;filename,int apiPreference)</code></h4>\n<h3 id=\"关闭和空间释放\"><a class=\"anchor\" href=\"#关闭和空间释放\">#</a> 关闭和空间释放</h3>\n<h4 id=\"~videocapture\"><a class=\"anchor\" href=\"#~videocapture\">#</a>  <code>~VideoCapture()</code></h4>\n<p>析构函数，智能指针，在复制之后，引用计数会加一，直到没有引用，才会释放，通过智能指针，空间的释放不用做太多的管理</p>\n<p>如果不想要转码的时候调用全部 gpu，可以修改源码</p>\n<h4 id=\"release\"><a class=\"anchor\" href=\"#release\">#</a>  <code>release()</code></h4>\n<p>主动释放，如果 VideoCapture 被两次调用，一个引用 - 1，另一个空间也不会被释放掉，只是把你这次的引用 - 1</p>\n<h2 id=\"读取一帧视频\"><a class=\"anchor\" href=\"#读取一帧视频\">#</a> 读取一帧视频</h2>\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VideoCapture video;</span><br><span class=\"line\">video.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;1.mp4&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!video.<span class=\"built_in\">isOpened</span>()) &#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;fail&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">cout &lt;&lt; <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">Mat frame;<span class=\"comment\">//用于存储每一帧视频图像</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//从视频中读取一帧并存储在 frame 中。如果读取失败，退出循环。</span></span><br><span class=\"line\">\t<span class=\"comment\">/*if (!video.read(frame)) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tbreak;</span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;*/</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//读帧，解码</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!video.<span class=\"built_in\">grab</span>()) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//转换颜色格式</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!video.<span class=\"built_in\">retrieve</span>(frame)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (frame.<span class=\"built_in\">empty</span>()) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//显示当前帧。</span></span><br><span class=\"line\">\t<span class=\"built_in\">imshow</span>(<span class=\"string\">&quot;video&quot;</span>, frame);</span><br><span class=\"line\">\t<span class=\"comment\">//等待5毫秒,与播放出来的速度有关</span></span><br><span class=\"line\">\t<span class=\"built_in\">waitKey</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"readoutputarray-image\"><a class=\"anchor\" href=\"#readoutputarray-image\">#</a>  <code>read(OutputArray image)</code></h3>\n<p>它先是解压缩（解码），然后对图片做了色彩转换</p>\n<p>h264 用一帧画面存储整个，也是用 jpg 来压缩，后面 50 帧画面只存储与这一帧的<strong>变化</strong>，这样的压缩率非常高，这样的话就存在一个问题，每一帧必须都要解码，比如说第十帧是针对第九帧的变化，那么取出一整个画面就是不对的，所以我们可以<strong>先把前面的解码</strong>，先不做图像转换，不显示，以提高效率</p>\n<h3 id=\"bool-grab\"><a class=\"anchor\" href=\"#bool-grab\">#</a>  <code>bool grab()</code></h3>\n<p>读取并解码</p>\n<h3 id=\"virtual-bool-retrieveoutputarray-imageint-flag-0\"><a class=\"anchor\" href=\"#virtual-bool-retrieveoutputarray-imageint-flag-0\">#</a>  <code>virtual bool retrieve(OutputArray image,int flag = 0 )</code></h3>\n<p>图像色彩转换</p>\n<h3 id=\"vcmat\"><a class=\"anchor\" href=\"#vcmat\">#</a>  <code>vc&gt;&gt;mat</code></h3>\n<h2 id=\"获取视频-相机属性\"><a class=\"anchor\" href=\"#获取视频-相机属性\">#</a> 获取视频、相机属性</h2>\n<p>其他属性的获取可以看 OpenCV 的 api 文档 ——OpenCV Flags for video I/O</p>\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> fps = video.<span class=\"built_in\">get</span>(CAP_PROP_FPS);<span class=\"comment\">//帧率，使用get()，里面放以下的参数</span></span><br><span class=\"line\"><span class=\"type\">int</span> s = <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (fps != <span class=\"number\">0</span>) s = <span class=\"number\">1000</span> / fps;<span class=\"comment\">//帧数</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"cap_prop_fps-帧率\"><a class=\"anchor\" href=\"#cap_prop_fps-帧率\">#</a>  <code>CAP_PROP_FPS</code>  帧率</h3>\n<p>一秒钟的帧数</p>\n<h3 id=\"cap_prop_frame_count总帧数\"><a class=\"anchor\" href=\"#cap_prop_frame_count总帧数\">#</a>  <code>CAP_PROP_FRAME_COUNT</code>  总帧数</h3>\n<p>计算视频时长：总帧数除以帧率（s）</p>\n<h3 id=\"cap_prop_pos_frames播放帧的位置\"><a class=\"anchor\" href=\"#cap_prop_pos_frames播放帧的位置\">#</a>  <code>CAP_PROP_POS_FRAMES</code>  播放帧的位置</h3>\n<p>跳帧，下一帧</p>\n<h3 id=\"cap_prop_frame_width-height\"><a class=\"anchor\" href=\"#cap_prop_frame_width-height\">#</a>  <code>CAP_PROP_FRAME_WIDTH HEIGHT</code></h3>\n<p>可以获取到视频帧的宽度高度，虽然一解码的时候可以获取到这个信息，但是有些处理，还没有读帧的时候需要用到这个高度，就需要用到，比如窗口自适应</p>\n<h2 id=\"设置视频播放的进度\"><a class=\"anchor\" href=\"#设置视频播放的进度\">#</a> 设置视频播放的进度</h2>\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> cur = video.<span class=\"built_in\">get</span>(CAP_PROP_POS_FRAMES);</span><br><span class=\"line\"><span class=\"comment\">//视频经过3s跳到开头</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (cur &gt; <span class=\"number\">90</span>) &#123;</span><br><span class=\"line\">\tvideo.<span class=\"built_in\">set</span>(CAP_PROP_POS_FRAMES, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"cap_prop_pos_msec毫秒位置\"><a class=\"anchor\" href=\"#cap_prop_pos_msec毫秒位置\">#</a>  <code>CAP_PROP_POS_MSEC</code>  毫秒位置</h3>\n<p>毫秒 -&gt; 帧 -&gt;ffmpeg 时间，要转两次，浮点数值来回转换，会出现数据的丢失，所以建议使用帧位置</p>\n<h3 id=\"cap_prop_pos_frames帧位置\"><a class=\"anchor\" href=\"#cap_prop_pos_frames帧位置\">#</a>  <code>CAP_PROP_POS_FRAMES</code>  帧位置</h3>\n<h2 id=\"videowriter\"><a class=\"anchor\" href=\"#videowriter\">#</a> VideoWriter</h2>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Aura-HY/blogImage@main/img/image-20240807123150031.png\" alt=\"image-20240807123150031\" /></p>\n<p>要主动释放 release ()</p>\n<h3 id=\"void-writeconst-mat\"><a class=\"anchor\" href=\"#void-writeconst-mat\">#</a>  <code>void write(const Mat&amp;)</code></h3>\n<h3 id=\"cvvideowriter_ffmpegwriteframe\"><a class=\"anchor\" href=\"#cvvideowriter_ffmpegwriteframe\">#</a>  <code>CvVideoWriter_FFMPEG::writeFrame</code></h3>\n<h2 id=\"录制摄像头视频并存储代码\"><a class=\"anchor\" href=\"#录制摄像头视频并存储代码\">#</a> 录制摄像头视频并存储代码</h2>\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//参数 0 指定使用第一个连接的摄像头</span></span><br><span class=\"line\">\t<span class=\"function\">VideoCapture <span class=\"title\">cam</span><span class=\"params\">(<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//检查摄像头是否成功打开</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!cam.<span class=\"built_in\">isOpened</span>()) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;fail&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//用于存储图像帧</span></span><br><span class=\"line\">\tMat img;</span><br><span class=\"line\">\t<span class=\"comment\">//用于写入视频文件</span></span><br><span class=\"line\">\tVideoWriter vw;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//获取摄像头的帧率（fps）</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> fps = cam.<span class=\"built_in\">get</span>(CAP_PROP_FPS);</span><br><span class=\"line\">\t<span class=\"comment\">//如果获取失败或帧率小于等于0，则默认设置帧率为25。</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (fps &lt;= <span class=\"number\">0</span>) fps = <span class=\"number\">25</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//打开视频写入器 vw 并准备写入文件 &quot;out.avi&quot;。</span></span><br><span class=\"line\">\tvw.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;out.avi&quot;</span>,</span><br><span class=\"line\">\t\tVideoWriter::<span class=\"built_in\">fourcc</span>(<span class=\"string\">&#x27;X&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;6&#x27;</span>, <span class=\"string\">&#x27;4&#x27;</span>),<span class=\"comment\">//指定视频编码格式为X264。</span></span><br><span class=\"line\">\t\tfps,<span class=\"comment\">//每秒帧数</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">Size</span>(cam.<span class=\"built_in\">get</span>(CAP_PROP_FRAME_WIDTH),<span class=\"comment\">//指定视频的宽度和高度</span></span><br><span class=\"line\">\t\t\tcam.<span class=\"built_in\">get</span>(CAP_PROP_FRAME_HEIGHT))</span><br><span class=\"line\">\t\t<span class=\"comment\">//两个函数返回摄像头当前设置的帧宽度和高度，单位是像素</span></span><br><span class=\"line\">\t);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//检查视频写入器是否成功打开</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!vw.<span class=\"built_in\">isOpened</span>()) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;falied&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;vw success&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">namedWindow</span>(<span class=\"string\">&quot;cam&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//读取摄像头的一帧图像到 img</span></span><br><span class=\"line\">\t\tcam.<span class=\"built_in\">read</span>(img);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (img.<span class=\"built_in\">empty</span>()) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">imshow</span>(<span class=\"string\">&quot;cam&quot;</span>, img);</span><br><span class=\"line\">\t\t<span class=\"comment\">//将图像 img 写入视频文件</span></span><br><span class=\"line\">\t\tvw.<span class=\"built_in\">write</span>(img);</span><br><span class=\"line\">\t\t<span class=\"comment\">//q退出</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">waitKey</span>(<span class=\"number\">5</span>) == <span class=\"string\">&#x27;q&#x27;</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"视频编辑器\"><a class=\"anchor\" href=\"#视频编辑器\">#</a> 视频编辑器</h2>\n<h3 id=\"bug修复\"><a class=\"anchor\" href=\"#bug修复\">#</a> bug 修复</h3>\n<p>1、信号没有发送</p>\n<p>线程没有开启，要在线程中加入 <code>start()</code></p>\n<p>2、在头文件中的函数要在 cpp 中有</p>\n<h3 id=\"流程\"><a class=\"anchor\" href=\"#流程\">#</a> 流程</h3>\n<h4 id=\"前期\"><a class=\"anchor\" href=\"#前期\">#</a> 前期</h4>\n<ul>\n<li>设置页面背景色</li>\n<li>取消顶部菜单栏 <code>setWindowFlags(Qt::FramelessWindowHint);</code></li>\n<li>添加关闭按钮，设置信号与槽</li>\n</ul>\n<h4 id=\"视频显示\"><a class=\"anchor\" href=\"#视频显示\">#</a> 视频显示</h4>\n<ul>\n<li>ui 添加 glWidget，并提升为新建立的类</li>\n<li>在主.cpp 中添加上传文件按钮，并设置 open 函数，连接信号槽</li>\n</ul>\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">VideoUI::open</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//返回的是一个路径</span></span><br><span class=\"line\">   QString name = QFileDialog::<span class=\"built_in\">getOpenFileName</span>(<span class=\"keyword\">this</span>,QString::<span class=\"built_in\">fromLocal8Bit</span>( <span class=\"string\">&quot;请选择要编辑的视频/图片&quot;</span>));</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (name.<span class=\"built_in\">isEmpty</span>()) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">   <span class=\"comment\">//主要是防止中文文件报错</span></span><br><span class=\"line\">   string file = name.<span class=\"built_in\">toLocal8Bit</span>().<span class=\"built_in\">data</span>();</span><br><span class=\"line\">   <span class=\"comment\">//QMessageBox::information(this, QString::fromLocal8Bit(&quot;获取视频名消息&quot;), name);</span></span><br><span class=\"line\">   <span class=\"comment\">//在线程中创建对象，打开文件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!videoThread::<span class=\"built_in\">Get</span>()-&gt;<span class=\"built_in\">open</span>(file)) &#123;</span><br><span class=\"line\">       QMessageBox::<span class=\"built_in\">information</span>(<span class=\"keyword\">this</span>, <span class=\"string\">&quot;&quot;</span>,name+<span class=\"string\">&quot;fail&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>创建线程，开启线程，在线程中打开文件，在 VideoUI 的 open 函数中调用 videoThread 类中的 get 创建对象，执行 open 函数</li>\n</ul>\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用于打开视频文件或摄像头，并从中读取视频帧</span></span><br><span class=\"line\"><span class=\"type\">static</span> VideoCapture cap1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">videoThread::open</span><span class=\"params\">(<span class=\"type\">const</span> std::string file)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tmutex.<span class=\"built_in\">lock</span>();</span><br><span class=\"line\">\t<span class=\"type\">bool</span> re = cap<span class=\"number\">1.</span><span class=\"built_in\">open</span>(file);</span><br><span class=\"line\">\tmutex.<span class=\"built_in\">unlock</span>();</span><br><span class=\"line\">\tcout &lt;&lt; re &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>线程启动后会自动调用 run (), 读取每帧视频存到 mat 对象中</li>\n<li>传递信号至 ui 中的显示容器中，用 setImage1 () 处理图像，paintEvent () 刷新图像</li>\n</ul>\n<h4 id=\"视频进度条\"><a class=\"anchor\" href=\"#视频进度条\">#</a> 视频进度条</h4>\n<h5 id=\"设置进度条随视频变化\"><a class=\"anchor\" href=\"#设置进度条随视频变化\">#</a> 设置进度条随视频变化：</h5>\n<p>在 VideoUI 中设置定时器，定时器获取到当前视频的播放状态然后再改变滑动条的位置</p>\n<p>videoThread 返回播放进度或者返回成员也能算出进度</p>\n<h5 id=\"拖动进度条变化视频\"><a class=\"anchor\" href=\"#拖动进度条变化视频\">#</a> 拖动进度条变化视频：</h5>\n<ul>\n<li>拖动进度条发送信号，带有参数，传进槽函数中处理</li>\n<li>在槽函数中将参数传入线程中调用 seek 函数，seek 函数获取当前视频的总帧数，计算出当前的位置</li>\n<li>传到另一个 seek 中设置画面到算出的这个位置</li>\n</ul>\n<h4 id=\"视频亮度和对比度调整\"><a class=\"anchor\" href=\"#视频亮度和对比度调整\">#</a> 视频亮度和对比度调整</h4>\n<p>videoUI-&gt;Filter-&gt;imagePro</p>\n<h5 id=\"添加videofilter类\"><a class=\"anchor\" href=\"#添加videofilter类\">#</a> 添加 videoFilter 类</h5>\n<p>相当于一个任务列表，执行多个任务，把任务依次给 imagePro 来执行，所以要先搞 imagePro</p>\n<h5 id=\"接收界面设置的参数\"><a class=\"anchor\" href=\"#接收界面设置的参数\">#</a> 接收界面设置的参数</h5>\n<h5 id=\"输出处理后的视频\"><a class=\"anchor\" href=\"#输出处理后的视频\">#</a> 输出处理后的视频</h5>\n<h4 id=\"后续每添加一个功能\"><a class=\"anchor\" href=\"#后续每添加一个功能\">#</a> 后续每添加一个功能</h4>\n<p>先做函数，再加过滤器（任务），调用对应处理的函数，然后就是 ui 部分</p>\n<h3 id=\"videothreadh\"><a class=\"anchor\" href=\"#videothreadh\">#</a> videoThread.h</h3>\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;QThread&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">videoThread</span>:<span class=\"keyword\">public</span> QThread</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">//这是一个静态成员函数声明。</span></span><br><span class=\"line\">    <span class=\"comment\">//static 意味着这个函数属于整个类，而不是属于某个对象（实例）。\t\t\t</span></span><br><span class=\"line\">    <span class=\"comment\">//videoThread* 是返回类型，表示这个函数返回的是一个 videoThread 类型的指针。</span></span><br><span class=\"line\">    <span class=\"comment\">//可以在没有创建对象的情况下调用它。</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">static</span> videoThread* <span class=\"title\">Get</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">static</span> videoThread vt;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &amp;vt;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//打开一号视频源文件</span></span><br><span class=\"line\">    <span class=\"comment\">//const 表示这个输入字符串在函数内不能被修改。</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">open</span><span class=\"params\">(<span class=\"type\">const</span> std::string file)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//这是一个清理对象时自动调用的函数。</span></span><br><span class=\"line\">\t~<span class=\"built_in\">videoThread</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//线程入口函数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将以下内容隐藏起来，只允许类本身或其子类访问。</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    <span class=\"comment\">//构造函数在创建类的对象时自动调用。</span></span><br><span class=\"line\">\t<span class=\"built_in\">videoThread</span>();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"videothreadhpp\"><a class=\"anchor\" href=\"#videothreadhpp\">#</a> videoThread.hpp</h3>\n<h4 id=\"mutex-互斥锁\"><a class=\"anchor\" href=\"#mutex-互斥锁\">#</a> mutex 互斥锁</h4>\n<p>用来防止多个线程同时访问 <code>cap1</code>  对象，避免数据竞争，在执行 “任务” 的时候上锁，防止别的线程插队，等执行完后再解锁，这个上锁解锁的原则就是晚锁早解，提高效率</p>\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;videoThread.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;opencv2/imgcodecs.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;opencv2/highgui.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;opencv2/imgproc.hpp&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;qdebug.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> cv;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用于打开视频文件或摄像头，并从中读取视频帧</span></span><br><span class=\"line\"><span class=\"type\">static</span> VideoCapture cap1;</span><br><span class=\"line\"><span class=\"comment\">//检查线程是否退出</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">bool</span> isexit = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">videoThread::<span class=\"built_in\">videoThread</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//要开启线程，否则其他都不会执行</span></span><br><span class=\"line\">\t<span class=\"built_in\">start</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">videoThread::open</span><span class=\"params\">(<span class=\"type\">const</span> std::string file)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tmutex.<span class=\"built_in\">lock</span>();</span><br><span class=\"line\">    <span class=\"comment\">//打开视频文件</span></span><br><span class=\"line\">\t<span class=\"type\">bool</span> re = cap<span class=\"number\">1.</span><span class=\"built_in\">open</span>(file);</span><br><span class=\"line\">\tmutex.<span class=\"built_in\">unlock</span>();</span><br><span class=\"line\">\tcout &lt;&lt; re &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">videoThread::run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\tMat m;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">\t\tmutex.<span class=\"built_in\">lock</span>();</span><br><span class=\"line\">        <span class=\"comment\">//如果isexit被设置为true（表示线程需要退出），则退出循环，并终止线程</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isexit) &#123;</span><br><span class=\"line\">\t\t\tmutex.<span class=\"built_in\">unlock</span>();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断视频是否打开</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!cap<span class=\"number\">1.</span><span class=\"built_in\">isOpened</span>())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tmutex.<span class=\"built_in\">unlock</span>();</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">msleep</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//读取视频</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!cap<span class=\"number\">1.</span><span class=\"built_in\">read</span>(m) || m.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tmutex.<span class=\"built_in\">unlock</span>();</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">msleep</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//显示图像,发送信号</span></span><br><span class=\"line\">\t\t<span class=\"function\">emit <span class=\"title\">viewImage1</span><span class=\"params\">(m)</span></span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">msleep</span>(<span class=\"number\">40</span>);</span><br><span class=\"line\">\t\tmutex.<span class=\"built_in\">unlock</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">videoThread::~<span class=\"built_in\">videoThread</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tmutex.<span class=\"built_in\">lock</span>();</span><br><span class=\"line\">\tisexit = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\tmutex.<span class=\"built_in\">unlock</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"videowidgethpp\"><a class=\"anchor\" href=\"#videowidgethpp\">#</a> videoWidget.hpp</h3>\n<h4 id=\"void-videowidgetpainteventqpaintevent-e\"><a class=\"anchor\" href=\"#void-videowidgetpainteventqpaintevent-e\">#</a>  <code>void videoWidget::paintEvent(QPaintEvent* e)</code></h4>\n<p>这是一个覆盖（override）了 <code>QOpenGLWidget</code>  中的 <code>paintEvent</code>  函数。 <code>paintEvent</code>  在 Qt 中是一个虚函数，当窗口部件需要重绘时（例如窗口大小改变，或者通过 <code>update()</code>  函数请求重绘时），Qt 会自动调用这个函数。</p>\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;videoWidget.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;QPainter&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化操作在QOpenGLWidget(p)进行</span></span><br><span class=\"line\">videoWidget::<span class=\"built_in\">videoWidget</span>(QWidget* p) :<span class=\"built_in\">QOpenGLWidget</span>(p)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">videoWidget::paintEvent</span><span class=\"params\">(QPaintEvent* e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//用于执行绘图操作</span></span><br><span class=\"line\">\tQPainter p;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//begin()函数开始在当前小部件（this）上进行绘图操作</span></span><br><span class=\"line\">\tp.<span class=\"built_in\">begin</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//在小部件的原点（QPoint(0, 0)）处绘制图像img</span></span><br><span class=\"line\">    <span class=\"comment\">//img包含了之前设置的图像数据</span></span><br><span class=\"line\">\tp.<span class=\"built_in\">drawImage</span>(<span class=\"built_in\">QPoint</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>), img);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//结束绘图操作，释放相关资源</span></span><br><span class=\"line\">\tp.<span class=\"built_in\">end</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">videoWidget::~<span class=\"built_in\">videoWidget</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">videoWidget::setImage</span><span class=\"params\">(cv::Mat mat)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (img.<span class=\"built_in\">isNull</span>())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//图像处理都要用uchar,否则会造成数据丢失</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//宽高像素</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//创建了一个大小为width() * height() * 3的缓冲区buf，用来存储图像数据</span></span><br><span class=\"line\">        <span class=\"comment\">//width()和height()是视频小部件的宽度和高度</span></span><br><span class=\"line\">        <span class=\"comment\">//乘以3是因为每个像素在Format_RGB888格式下占用3个字节（分别表示红、绿、蓝三个颜色通道）</span></span><br><span class=\"line\">\t\tuchar* buf = <span class=\"keyword\">new</span> uchar[<span class=\"built_in\">width</span>() * <span class=\"built_in\">height</span>() * <span class=\"number\">3</span>];</span><br><span class=\"line\">        <span class=\"comment\">//创建一个新的QImage对象，并将buf作为其内部数据存储</span></span><br><span class=\"line\">\t\timg = <span class=\"built_in\">QImage</span>(buf, <span class=\"built_in\">width</span>(), <span class=\"built_in\">height</span>(), QImage::Format_RGB888);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">//将OpenCV图像mat的数据复制到QImage的缓冲区中。</span></span><br><span class=\"line\">    <span class=\"comment\">//img.bits()返回QImage数据的指针，mat.data是cv::Mat图像数据的指针。</span></span><br><span class=\"line\">    <span class=\"comment\">//mat.cols * mat.rows * mat.elemSize()计算了需要复制的数据大小</span></span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(img.<span class=\"built_in\">bits</span>(), mat.data, mat.cols * mat.rows * mat.<span class=\"built_in\">elemSize</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//刷新会调用到paintevent</span></span><br><span class=\"line\">    <span class=\"comment\">//设置了新的图像数据后，小部件会立即刷新显示</span></span><br><span class=\"line\">\t<span class=\"built_in\">update</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        }
    ]
}